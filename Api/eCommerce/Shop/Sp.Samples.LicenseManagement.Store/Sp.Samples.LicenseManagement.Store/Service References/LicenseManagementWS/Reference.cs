//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sp.Samples.LicenseManagement.Store.LicenseManagementWS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Feature[] FeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Feature[] Features {
            get {
                return this.FeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FeaturesField, value) != true)) {
                    this.FeaturesField = value;
                    this.RaisePropertyChanged("Features");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorName {
            get {
                return this.VendorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorNameField, value) != true)) {
                    this.VendorNameField = value;
                    this.RaisePropertyChanged("VendorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Feature", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class Feature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeneralErrorException", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class GeneralErrorException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APINotLicensedException", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class APINotLicensedException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductFilter", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class ProductFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductRetrievalOptions", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Licensing.LicenseIssue")]
    public enum ProductRetrievalOptions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Basic = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Features = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomTag", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class CustomTag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagValue {
            get {
                return this.TagValueField;
            }
            set {
                if ((object.ReferenceEquals(this.TagValueField, value) != true)) {
                    this.TagValueField = value;
                    this.RaisePropertyChanged("TagValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseInfo", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class LicenseInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivationLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.CustomTag[] CustomTagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseFeature[] FeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDistributorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRenewableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTrialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseStore LicenseStoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Limitations LimitationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkuIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VirtualMachinesAllowedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivationLimit {
            get {
                return this.ActivationLimitField;
            }
            set {
                if ((this.ActivationLimitField.Equals(value) != true)) {
                    this.ActivationLimitField = value;
                    this.RaisePropertyChanged("ActivationLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.CustomTag[] CustomTags {
            get {
                return this.CustomTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomTagsField, value) != true)) {
                    this.CustomTagsField = value;
                    this.RaisePropertyChanged("CustomTags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseFeature[] Features {
            get {
                return this.FeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FeaturesField, value) != true)) {
                    this.FeaturesField = value;
                    this.RaisePropertyChanged("Features");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDistributor {
            get {
                return this.IsDistributorField;
            }
            set {
                if ((this.IsDistributorField.Equals(value) != true)) {
                    this.IsDistributorField = value;
                    this.RaisePropertyChanged("IsDistributor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRenewable {
            get {
                return this.IsRenewableField;
            }
            set {
                if ((this.IsRenewableField.Equals(value) != true)) {
                    this.IsRenewableField = value;
                    this.RaisePropertyChanged("IsRenewable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTrial {
            get {
                return this.IsTrialField;
            }
            set {
                if ((this.IsTrialField.Equals(value) != true)) {
                    this.IsTrialField = value;
                    this.RaisePropertyChanged("IsTrial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseStore LicenseStore {
            get {
                return this.LicenseStoreField;
            }
            set {
                if ((this.LicenseStoreField.Equals(value) != true)) {
                    this.LicenseStoreField = value;
                    this.RaisePropertyChanged("LicenseStore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Limitations Limitations {
            get {
                return this.LimitationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LimitationsField, value) != true)) {
                    this.LimitationsField = value;
                    this.RaisePropertyChanged("Limitations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkuId {
            get {
                return this.SkuIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SkuIdField, value) != true)) {
                    this.SkuIdField = value;
                    this.RaisePropertyChanged("SkuId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VirtualMachinesAllowed {
            get {
                return this.VirtualMachinesAllowedField;
            }
            set {
                if ((this.VirtualMachinesAllowedField.Equals(value) != true)) {
                    this.VirtualMachinesAllowedField = value;
                    this.RaisePropertyChanged("VirtualMachinesAllowed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Limitations", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class Limitations : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ExpirationPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GatherUsageCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan GracePeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxConcurrentUsageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxTotalUsageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ExpirationPeriod {
            get {
                return this.ExpirationPeriodField;
            }
            set {
                if ((this.ExpirationPeriodField.Equals(value) != true)) {
                    this.ExpirationPeriodField = value;
                    this.RaisePropertyChanged("ExpirationPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GatherUsageCount {
            get {
                return this.GatherUsageCountField;
            }
            set {
                if ((this.GatherUsageCountField.Equals(value) != true)) {
                    this.GatherUsageCountField = value;
                    this.RaisePropertyChanged("GatherUsageCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan GracePeriod {
            get {
                return this.GracePeriodField;
            }
            set {
                if ((this.GracePeriodField.Equals(value) != true)) {
                    this.GracePeriodField = value;
                    this.RaisePropertyChanged("GracePeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxConcurrentUsage {
            get {
                return this.MaxConcurrentUsageField;
            }
            set {
                if ((this.MaxConcurrentUsageField.Equals(value) != true)) {
                    this.MaxConcurrentUsageField = value;
                    this.RaisePropertyChanged("MaxConcurrentUsage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxTotalUsage {
            get {
                return this.MaxTotalUsageField;
            }
            set {
                if ((this.MaxTotalUsageField.Equals(value) != true)) {
                    this.MaxTotalUsageField = value;
                    this.RaisePropertyChanged("MaxTotalUsage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseFeature", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class LicenseFeature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Limitations LimitationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Limitations Limitations {
            get {
                return this.LimitationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LimitationsField, value) != true)) {
                    this.LimitationsField = value;
                    this.RaisePropertyChanged("Limitations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseStore", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Licensing.LicenseIssue")]
    public enum LicenseStore : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Machine = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoLock = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Memory = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="License", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class License : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivationKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseInfo LicenseInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RevisionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivationKey {
            get {
                return this.ActivationKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivationKeyField, value) != true)) {
                    this.ActivationKeyField = value;
                    this.RaisePropertyChanged("ActivationKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseId {
            get {
                return this.LicenseIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseIdField, value) != true)) {
                    this.LicenseIdField = value;
                    this.RaisePropertyChanged("LicenseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseInfo LicenseInfo {
            get {
                return this.LicenseInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseInfoField, value) != true)) {
                    this.LicenseInfoField = value;
                    this.RaisePropertyChanged("LicenseInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Revision {
            get {
                return this.RevisionField;
            }
            set {
                if ((this.RevisionField.Equals(value) != true)) {
                    this.RevisionField = value;
                    this.RaisePropertyChanged("Revision");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseSummary", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class LicenseSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivationCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivationLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTrialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastActivationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivationCount {
            get {
                return this.ActivationCountField;
            }
            set {
                if ((this.ActivationCountField.Equals(value) != true)) {
                    this.ActivationCountField = value;
                    this.RaisePropertyChanged("ActivationCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivationLimit {
            get {
                return this.ActivationLimitField;
            }
            set {
                if ((this.ActivationLimitField.Equals(value) != true)) {
                    this.ActivationLimitField = value;
                    this.RaisePropertyChanged("ActivationLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTrial {
            get {
                return this.IsTrialField;
            }
            set {
                if ((this.IsTrialField.Equals(value) != true)) {
                    this.IsTrialField = value;
                    this.RaisePropertyChanged("IsTrial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastActivationDate {
            get {
                return this.LastActivationDateField;
            }
            set {
                if ((this.LastActivationDateField.Equals(value) != true)) {
                    this.LastActivationDateField = value;
                    this.RaisePropertyChanged("LastActivationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseId {
            get {
                return this.LicenseIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseIdField, value) != true)) {
                    this.LicenseIdField = value;
                    this.RaisePropertyChanged("LicenseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductVersion {
            get {
                return this.ProductVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductVersionField, value) != true)) {
                    this.ProductVersionField = value;
                    this.RaisePropertyChanged("ProductVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SkuFilter", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class SkuFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkuNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkuName {
            get {
                return this.SkuNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SkuNameField, value) != true)) {
                    this.SkuNameField = value;
                    this.RaisePropertyChanged("SkuName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="SkuRetrievalOptions", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Licensing.LicenseIssue")]
    public enum SkuRetrievalOptions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Basic = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LicenseInfo = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sku", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class Sku : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseInfo LicenseInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseInfo LicenseInfo {
            get {
                return this.LicenseInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseInfoField, value) != true)) {
                    this.LicenseInfoField = value;
                    this.RaisePropertyChanged("LicenseInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseFilter", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class LicenseFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.DateRange ActivationDateRangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeCommercialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExcludeTrialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.DateRange ExpirationDateRangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.DateRange IssueDateRangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkuIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.DateRange ActivationDateRange {
            get {
                return this.ActivationDateRangeField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivationDateRangeField, value) != true)) {
                    this.ActivationDateRangeField = value;
                    this.RaisePropertyChanged("ActivationDateRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeCommercial {
            get {
                return this.ExcludeCommercialField;
            }
            set {
                if ((this.ExcludeCommercialField.Equals(value) != true)) {
                    this.ExcludeCommercialField = value;
                    this.RaisePropertyChanged("ExcludeCommercial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExcludeTrial {
            get {
                return this.ExcludeTrialField;
            }
            set {
                if ((this.ExcludeTrialField.Equals(value) != true)) {
                    this.ExcludeTrialField = value;
                    this.RaisePropertyChanged("ExcludeTrial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.DateRange ExpirationDateRange {
            get {
                return this.ExpirationDateRangeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpirationDateRangeField, value) != true)) {
                    this.ExpirationDateRangeField = value;
                    this.RaisePropertyChanged("ExpirationDateRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.DateRange IssueDateRange {
            get {
                return this.IssueDateRangeField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueDateRangeField, value) != true)) {
                    this.IssueDateRangeField = value;
                    this.RaisePropertyChanged("IssueDateRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkuId {
            get {
                return this.SkuIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SkuIdField, value) != true)) {
                    this.SkuIdField = value;
                    this.RaisePropertyChanged("SkuId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateRange", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class DateRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseRetrievalOptions", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Licensing.LicenseIssue")]
    public enum LicenseRetrievalOptions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Basic = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LicenseInfo = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationFilter", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class ActivationFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseId {
            get {
                return this.LicenseIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseIdField, value) != true)) {
                    this.LicenseIdField = value;
                    this.RaisePropertyChanged("LicenseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationRetrievalOptions", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Licensing.LicenseIssue")]
    public enum ActivationRetrievalOptions : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Basic = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Activation", Namespace="http://www.microsoft.com/slps/")]
    [System.SerializableAttribute()]
    public partial class Activation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ActivationMode ActivationModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ActivationMode ActivationMode {
            get {
                return this.ActivationModeField;
            }
            set {
                if ((this.ActivationModeField.Equals(value) != true)) {
                    this.ActivationModeField = value;
                    this.RaisePropertyChanged("ActivationMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivationTime {
            get {
                return this.ActivationTimeField;
            }
            set {
                if ((this.ActivationTimeField.Equals(value) != true)) {
                    this.ActivationTimeField = value;
                    this.RaisePropertyChanged("ActivationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseId {
            get {
                return this.LicenseIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseIdField, value) != true)) {
                    this.LicenseIdField = value;
                    this.RaisePropertyChanged("LicenseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StoreId {
            get {
                return this.StoreIdField;
            }
            set {
                if ((object.ReferenceEquals(this.StoreIdField, value) != true)) {
                    this.StoreIdField = value;
                    this.RaisePropertyChanged("StoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivationMode", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Licensing.LicenseIssue")]
    public enum ActivationMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.microsoft.com/slps/", ConfigurationName="LicenseManagementWS.ILicenseManagementWS")]
    public interface ILicenseManagementWS {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductById", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductByIdGeneralErrorExce" +
            "ptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductByIdAPINotLicensedEx" +
            "ceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductByIdArgumentExceptio" +
            "nFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Product GetProductById(string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProducts", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsAPINotLicensedExcep" +
            "tionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsGeneralErrorExcepti" +
            "onFault", Name="GeneralErrorException")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Product[] GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsByFilter", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsByFilterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsByFilterArgumentExc" +
            "eptionFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsByFilterGeneralErro" +
            "rExceptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetProductsByFilterAPINotLicen" +
            "sedExceptionFault", Name="APINotLicensedException")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Product[] GetProductsByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ProductFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ProductRetrievalOptions retrievalOption, ref int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/IssueLicenseByTemplate", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/IssueLicenseByTemplateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/IssueLicenseByTemplateGeneralE" +
            "rrorExceptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/IssueLicenseByTemplateAPINotLi" +
            "censedExceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/IssueLicenseByTemplateArgument" +
            "NullExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/IssueLicenseByTemplateArgument" +
            "ExceptionFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        string IssueLicenseByTemplate(string templateLicenseKey, string licenseDescription, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.CustomTag[] customTags);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/CreateLicense", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/CreateLicenseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/CreateLicenseArgumentException" +
            "Fault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/CreateLicenseArgumentNullExcep" +
            "tionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/CreateLicenseGeneralErrorExcep" +
            "tionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/CreateLicenseAPINotLicensedExc" +
            "eptionFault", Name="APINotLicensedException")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License CreateLicense(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseInfo licenseInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/UpdateLicense", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/UpdateLicenseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/UpdateLicenseArgumentNullExcep" +
            "tionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/UpdateLicenseArgumentException" +
            "Fault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/UpdateLicenseAPINotLicensedExc" +
            "eptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/UpdateLicenseGeneralErrorExcep" +
            "tionFault", Name="GeneralErrorException")]
        void UpdateLicense(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License license, bool andReissue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByActivationKey", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByActivationKeyRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByActivationKeyAPINo" +
            "tLicensedExceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByActivationKeyGener" +
            "alErrorExceptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByActivationKeyArgum" +
            "entExceptionFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License GetLicenseByActivationKey(string activationKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseSummariesByLicenseId" +
            "s", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseSummariesByLicenseId" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseSummariesByLicenseId" +
            "sAPINotLicensedExceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseSummariesByLicenseId" +
            "sArgumentExceptionFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseSummariesByLicenseId" +
            "sGeneralErrorExceptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseSummariesByLicenseId" +
            "sArgumentNullExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseSummary[] GetLicenseSummariesByLicenseIds(string[] licenseIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseById", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByIdGeneralErrorExce" +
            "ptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByIdAPINotLicensedEx" +
            "ceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicenseByIdArgumentExceptio" +
            "nFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License GetLicenseById(string licenseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkusByFilter", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkusByFilterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkusByFilterAPINotLicensedE" +
            "xceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkusByFilterArgumentExcepti" +
            "onFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkusByFilterGeneralErrorExc" +
            "eptionFault", Name="GeneralErrorException")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Sku[] GetSkusByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.SkuFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.SkuRetrievalOptions retrievalOptions, ref int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkuById", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkuByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkuByIdArgumentExceptionFau" +
            "lt", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkuByIdAPINotLicensedExcept" +
            "ionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetSkuByIdGeneralErrorExceptio" +
            "nFault", Name="GeneralErrorException")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Sku GetSkuById(string skuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetCountOfLicensesByFilter", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetCountOfLicensesByFilterResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetCountOfLicensesByFilterAPIN" +
            "otLicensedExceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetCountOfLicensesByFilterGene" +
            "ralErrorExceptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetCountOfLicensesByFilterArgu" +
            "mentNullExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetCountOfLicensesByFilterArgu" +
            "mentExceptionFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        int GetCountOfLicensesByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicensesByFilter", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicensesByFilterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicensesByFilterGeneralErro" +
            "rExceptionFault", Name="GeneralErrorException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicensesByFilterAPINotLicen" +
            "sedExceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicensesByFilterArgumentExc" +
            "eptionFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetLicensesByFilterArgumentNul" +
            "lExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License[] GetLicensesByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseRetrievalOptions retrievalOptions, ref int pageIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetActivationsByFilter", ReplyAction="http://www.microsoft.com/slps/ILicenseManagementWS/GetActivationsByFilterResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetActivationsByFilterArgument" +
            "ExceptionFault", Name="ArgumentException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetActivationsByFilterArgument" +
            "NullExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.APINotLicensedException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetActivationsByFilterAPINotLi" +
            "censedExceptionFault", Name="APINotLicensedException")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.GeneralErrorException), Action="http://www.microsoft.com/slps/ILicenseManagementWS/GetActivationsByFilterGeneralE" +
            "rrorExceptionFault", Name="GeneralErrorException")]
        Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Activation[] GetActivationsByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ActivationFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ActivationRetrievalOptions retrievalOptions, ref int pageIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILicenseManagementWSChannel : Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ILicenseManagementWS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseManagementWSClient : System.ServiceModel.ClientBase<Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ILicenseManagementWS>, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ILicenseManagementWS {
        
        public LicenseManagementWSClient() {
        }
        
        public LicenseManagementWSClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseManagementWSClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseManagementWSClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseManagementWSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Product GetProductById(string productId) {
            return base.Channel.GetProductById(productId);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Product[] GetProducts() {
            return base.Channel.GetProducts();
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Product[] GetProductsByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ProductFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ProductRetrievalOptions retrievalOption, ref int pageIndex) {
            return base.Channel.GetProductsByFilter(filter, retrievalOption, ref pageIndex);
        }
        
        public string IssueLicenseByTemplate(string templateLicenseKey, string licenseDescription, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.CustomTag[] customTags) {
            return base.Channel.IssueLicenseByTemplate(templateLicenseKey, licenseDescription, customTags);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License CreateLicense(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseInfo licenseInfo) {
            return base.Channel.CreateLicense(licenseInfo);
        }
        
        public void UpdateLicense(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License license, bool andReissue) {
            base.Channel.UpdateLicense(license, andReissue);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License GetLicenseByActivationKey(string activationKey) {
            return base.Channel.GetLicenseByActivationKey(activationKey);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseSummary[] GetLicenseSummariesByLicenseIds(string[] licenseIds) {
            return base.Channel.GetLicenseSummariesByLicenseIds(licenseIds);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License GetLicenseById(string licenseId) {
            return base.Channel.GetLicenseById(licenseId);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Sku[] GetSkusByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.SkuFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.SkuRetrievalOptions retrievalOptions, ref int pageIndex) {
            return base.Channel.GetSkusByFilter(filter, retrievalOptions, ref pageIndex);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Sku GetSkuById(string skuId) {
            return base.Channel.GetSkuById(skuId);
        }
        
        public int GetCountOfLicensesByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseFilter filter) {
            return base.Channel.GetCountOfLicensesByFilter(filter);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.License[] GetLicensesByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.LicenseRetrievalOptions retrievalOptions, ref int pageIndex) {
            return base.Channel.GetLicensesByFilter(filter, retrievalOptions, ref pageIndex);
        }
        
        public Sp.Samples.LicenseManagement.Store.LicenseManagementWS.Activation[] GetActivationsByFilter(Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ActivationFilter filter, Sp.Samples.LicenseManagement.Store.LicenseManagementWS.ActivationRetrievalOptions retrievalOptions, ref int pageIndex) {
            return base.Channel.GetActivationsByFilter(filter, retrievalOptions, ref pageIndex);
        }
    }
}

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Licensing.Runtime2.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Licensing.InvalidLicenseKeyException">
            <summary>
            License Key format is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.InvalidLicenseKeyException.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.InvalidLicenseKeyException.#ctor(System.String,System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.InvalidLicenseKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Licensing.InvalidLicenseKeyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Microsoft.Licensing.InvalidLicenseKeyException.LicenseKey">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Microsoft.Licensing.LicenseStoreIdMismatchException">
            <summary>
            The License Device Id does not match the device Id a license is locked to.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.LicenseStoreIdMismatchException.#ctor(System.String,System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.LicenseStoreIdMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Licensing.LicenseStoreIdMismatchException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Microsoft.Licensing.LicenseStoreIdMismatchException.Message">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Microsoft.Licensing.InvalidLicenseRevisionException">
            <summary>
            License of older revision cannot be installed over a license with newer revision
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.InvalidLicenseRevisionException.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.InvalidLicenseRevisionException.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.InvalidLicenseRevisionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Licensing.InvalidLicenseRevisionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Microsoft.Licensing.NotLicensedException">
            <summary>
            Thrown when there's no license to Execute protected code.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.NotLicensedException.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.NotLicensedException.#ctor(System.String,System.Exception)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.NotLicensedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Licensing.NotLicensedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Microsoft.Licensing.TemporaryConditionNotLicensedException">
            <summary>
            Thrown when there's a temporary condition which inhibits execution of a licensed feature.
            It is probable that subsequent calls to the protected feature may result in successful execution.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.TemporaryConditionNotLicensedException.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.TemporaryConditionNotLicensedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Licensing.TemporaryConditionNotLicensedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Slps.Engine.Internal.InternalFeatureAttribute">
            <summary>
            This attribute can be attached to method to indicate that it should be transformed during Code Protection
            
            NB this does not require a license, 
            <seealso cref="T:Slps.ProtectionAttributes.FeatureAttribute"/>
            </summary>summary&gt;
        </member>
        <member name="F:Slps.Engine.Internal.InternalFeatureAttribute.FEATURE_PROPERTY_NAME">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="F:Slps.Engine.Internal.InternalFeatureAttribute.CODE_RULE_TYPE_PROPERTY_NAME">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Internal.InternalFeatureAttribute.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Internal.InternalFeatureAttribute.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Internal.InternalFeatureAttribute.#ctor(Slps.Engine.Internal.CodeRuleType)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Internal.InternalFeatureAttribute.FeatureName">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Internal.InternalFeatureAttribute.CodeRuleType">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Slps.Engine.Internal.CodeRuleType">
            <summary>
            Type of CodeRule (Include/Exclude).
            </summary>
        </member>
        <member name="F:Slps.Engine.Internal.CodeRuleType.Include">
            <summary>
            Include all code entities that match the rule.
            </summary>
        </member>
        <member name="F:Slps.Engine.Internal.CodeRuleType.Exclude">
            <summary>
            Exclude all code entities that match the rule.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.LicenseIntegrityException">
            <summary>
            License data is corrupted
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.LicenseIntegrityException.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.LicenseIntegrityException.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Microsoft.Licensing.LicenseStoreStateException">
            <summary>
            License Device state is invalid
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.LicenseStoreStateException.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.LicenseStoreStateException.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.LicenseStoreStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Licensing.LicenseStoreStateException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Microsoft.Licensing.InvalidDigitalSignatureException">
            <summary>
            License digital signature is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.InvalidDigitalSignatureException.#ctor">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Licensing.InvalidDigitalSignatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Licensing.InvalidDigitalSignatureException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.IExecutionEngineParams">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionEngineParams.ExtractParameters(System.Object,System.Object@,System.Object[]@)">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Slps.Engine.Execution.Internal.IExecutionEngineParams"/>
            <param name="methodData">For internal use.</param>
            <param name="objectInstance">For internal use.</param>
            <param name="arguments">For internal use.</param>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments.GenericTypeArgs">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments.GenericMethodArgs">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.IExecutionEngineGenericArguments.Stack">
            <summary>
            For internal use.
            </summary>		
        </member>
        <member name="T:Slps.Engine.Execution.Internal.IExecutionStack">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Push(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Enter(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Exit(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionStack.Pop(System.Guid)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.IExecutionEngine">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.IExecutionEngine.ExecuteMethod(System.Reflection.Assembly,System.String,Slps.Engine.Execution.Internal.IExecutionEngineParams)">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Slps.Engine.Execution.Internal.IExecutionEngine"/>
            <param name="methodAssembly">For internal use.</param>
            <param name="svmMethodId">For internal use.</param>
            <param name="parameters">For internal use.</param>
            <returns>For internal use.</returns>
        </member>
        <member name="T:Slps.Engine.Execution.Internal.InvocationContext">
            /// <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.InvocationContext.#ctor(System.Object,System.Object[],System.Type[],System.Type[])">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Execution.Internal.InvocationContext.ExtractParameters(System.Object,System.Object@,System.Object[]@)">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.InvocationContext.GenericTypeArgs">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.InvocationContext.GenericMethodArgs">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="P:Slps.Engine.Execution.Internal.InvocationContext.Stack">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            Subject to unlimited change without notice even in minor version changes.
            </remarks>
        </member>
        <member name="T:Microsoft.Licensing.LicenseTicketProviderType">
            <summary>
            Describes the License key format. The current format is V1.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseTicketProviderType.V1">
            <summary>
            The current format. 
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.ActivationKeyFormat">
            <summary>
            Describes the Activation key format. The current format is V1.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationKeyFormat.V1">
            <summary>
            The current format.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.IActivationKey">
            <summary>
            This interface exposes properties that provide information 
            related to the activation key on the client machine.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationKey.Ticket">
            <summary>
            This specifies the License ticket data. It represents a unique Id of the
            license, thereby making the activation key unique.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IActivationKey"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationKey.ShortTicket">
            <summary>
            This specifies the short license ticket data. It is unique, and
            derived from the License ticket data.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IActivationKey"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationKey.KeyFormat">
            <summary>
            This specifies the activation key format. Multiple formats may be supported.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IActivationKey"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationKey.TicketProviderType">
            <summary>
            This specifies the algorithm used for generating the ticket.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IActivationKey"/>
        </member>
        <member name="T:Microsoft.Licensing.ICustomTag">
            <summary>
            This interface exposes properties to fetch Custom Tag information.
            Custom tags can be attached to a license to embed vendor-specific information.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ICustomTagCollection"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.ICustomTag.Name">
            <summary>
            Name of the custom tag.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ICustomTag"/>
        </member>
        <member name="P:Microsoft.Licensing.ICustomTag.Value">
            <summary>
            Value of the custom tag.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ICustomTag"/>
        </member>
        <member name="T:Microsoft.Licensing.ICustomTagCollection">
            <summary>
            This interface is inherited from the <see cref="T:System.Collections.ICollection"/> interface. 
            It represents a collection of Custom Tags.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ICustomTag"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ICustomTagCollection.Contains(System.String)">
            <summary>
            Verifies if a Custom Tag with the specified name exists in the collection.
            </summary>
            <param name="name">Name of the Custom Tag.</param>
            <returns>True, if a Custom Tag object with the specified name was found in the collection. False, otherwise.</returns>
            <seealso cref="T:Microsoft.Licensing.ICustomTagCollection"/>
        </member>
        <member name="P:Microsoft.Licensing.ICustomTagCollection.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.ICustomTag"/> object by index.
            </summary>
            <param name="index">Zero-based index in the collection. Must be less than <see cref="P:System.Collections.ICollection.Count"/>.</param>
            <returns><see cref="T:Microsoft.Licensing.ICustomTag"/> object at a specified index.</returns>
            <seealso cref="T:Microsoft.Licensing.ICustomTagCollection"/>
        </member>
        <member name="P:Microsoft.Licensing.ICustomTagCollection.Item(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.ICustomTag"/> object by name.
            </summary>
            <param name="name">Name of the Custom Tag.</param>
            <returns>ICustomTag object with a specified name. Returns null, if 
            a Custom Tag object with the specified name was not found.</returns>
            <seealso cref="T:Microsoft.Licensing.ICustomTagCollection"/>
        </member>
        <member name="T:Microsoft.Licensing.IFeature">
            <summary>
            This interface exposes properties that provide  information related to the licensed 
            feature, accessible through the runtime License object.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureCollection"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeature.Name">
            <summary>
            Specifies the name of the feature. For example, "Save documents".
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeature"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeature.Limitations">
            <summary>
            Specifies the limitations attached to the feature.
            A feature can be limited by expiration date, total usage, or concurrent usage.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeature"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeature.IsGatherUsage">
            <summary>
            Indicates if usage information should be gathered for the feature.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeature"/>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureCollection">
            <summary>
            This interface is inherited from the <see cref="T:System.Collections.ICollection"/> interface. 
            It represents a collection of <see cref="T:Microsoft.Licensing.IFeature"/> objects.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.IFeatureCollection.Contains(System.String)">
            <summary>
            Verifies if a Feature object with the specified name exists in the collection.
            </summary>
            <param name="name">Specifies the name of the Feature object.</param>
            <returns>True, if a Feature object with specified name was found in the 
            collection. False, otherwise.</returns>
            <seealso cref="T:Microsoft.Licensing.IFeatureCollection"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureCollection.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.IFeature"/> object by index.
            </summary>
            <param name="index">Specifies the zero-based index in the collection. 
            It must be less than <see cref="P:System.Collections.ICollection.Count"/>.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeature"/> object at the provided index.</returns>
            <seealso cref="T:Microsoft.Licensing.IFeatureCollection"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureCollection.Item(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.IFeature"/> object by name.
            </summary>
            <param name="name">Specifies the name of the Feature object.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeature"/> object with the provided name. Returns null if a
            Feature object with the specified name was not found.</returns>
            <seealso cref="T:Microsoft.Licensing.IFeatureCollection"/>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureRuntimeCounters">
            <summary>
            Represents feature runtime counters.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeCounters.TotalUsageCount">
            <summary>
            Represents the number of times feature was used.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeCounters"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeCounters.LockCount">
            <summary>
            Represents a count of feature locks.
            </summary>
            <remarks>For additional explanation on locks, see <see cref="T:Microsoft.Licensing.IFeatureLockData"/>.</remarks>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeCounters"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeCounters.WorkTime">
            <summary>
            Represents work time.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeCounters"/>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureRuntimeData">
            <summary>
            Represents runtime client information related to a license feature.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeData.Name">
            <summary>
            Specifies the feature name.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeData"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeData.Used">
            <summary>
            Represents current utilization.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeData"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeData.Available">
            <summary>
            Represents available usage.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeData"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeData.Limit">
            <summary>
            Represents the limits of counters.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeData"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeData.RequiresGatherUsage">
            <summary>
            Indicates if usage count needs to be gathered for the feature, either explicitly requested or implicitly as an input into usage limitation checks.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeData"/>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureRuntimeDataCollection">
            <summary>
            This interface is inherited from the <see cref="T:System.Collections.ICollection"/> interface. It 
            represents a collection of <see cref="T:Microsoft.Licensing.IFeatureRuntimeData"/> objects.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.IFeatureRuntimeDataCollection.Contains(System.String)">
            <summary>
            Verifies if an IFeatureRuntimeData object with the specified name exists in the 
            collection.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeDataCollection"/>
            <param name="name">Specifies the name of the IFeatureRuntimeData object.</param>
            <returns>True, if an IFeatureRuntimeData object with the specified feature name was found 
            in the collection. False, otherwise.</returns>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeDataCollection.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.IFeatureRuntimeData"/> object by index.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeDataCollection"/>
            <param name="index">Specifies the zero-based index in the collection. 
            It must be less than <see cref="P:System.Collections.ICollection.Count"/>.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeatureRuntimeData"/> object at the provided index.</returns>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureRuntimeDataCollection.Item(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.IFeatureRuntimeData"/> object by name.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureRuntimeDataCollection"/>
            <param name="name">Specifies the name of the <see cref="T:Microsoft.Licensing.IFeatureRuntimeData"/> object.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeatureRuntimeData"/> object with the provided name. 
            Returns null if an IFeatureRuntimeData object with the specified name was not found.</returns>
        </member>
        <member name="T:Microsoft.Licensing.LicenseState">
            <summary>
            Describes the License object state.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.Valid">
            <summary>
            Specifies that the License is valid, and can be used.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.Expired">
            <summary>
            Specifies that the License has expired.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.NotValidYet">
            <summary>
            Specifies that the License "Start Date" limitation is after the current date.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.IntegrityProblem">
            <summary>
            Specifies that the License is corrupted, and an integrity check on its data failed.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.StoreIdMismatch">
            <summary>
            Specifies that the License is incompatible with the device it is installed on.
            Such a situation occurs, for example, if the device Id of ComputerId device changes.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.WorkingTimeLimitExceeded">
            <summary>
            Specifies that the total working time limitation was exceeded.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.ForeignVendor">
            <summary>
            Specifies that the license does not belong to the vendor for whom the current Permutation was created.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseState.TotalUsageLimitExceeded">
            <summary>
            Specifies that the maximum execution limit was exceeded for the license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseState"/>
        </member>
        <member name="T:Microsoft.Licensing.ILicense">
            <summary>
            This interface represents a runtime license. It exposes properties to fetch
            installation-specific license information. The license information is "Read-only".
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseData">
            <summary>
            This interface represents runtime license data generated by the server. It 
            exposes a number of properties that provide vendor, product, and 
            license-related details. This data is "Read-only", and does not contain any
            installation-specific information. 
            </summary>
            <remarks>Installation-specific license information is available from <see cref="T:Microsoft.Licensing.ILicense"/>.</remarks>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.Vendor">
            <summary>
            Specifies the name of the vendor that issued the license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.ProductName">
            <summary>
            Indicates the product name to which the license applies.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.ProductVersion">
            <summary>
            Indicates the product version to which the license applies.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.PackageName">
            <summary>
            Indicates the product package to which the license applies.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.LicenseStoreId">
            <summary>
            Specifies the license id generated by the server, based on the device-type and
            device-id of the device for which the license is intended. For a license to be
            valid, this id should be the same as <see cref="P:Microsoft.Licensing.ILicenseStore.StoreId"/>. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.IssueDate">
            <summary>
            Specifies the License issue date.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.StartDate">
            <summary>
            Indicates the starting date limitation of the license. The license becomes valid
            for use on this date, and is in a "NotValidYet" state prior to this date.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.IsDistributor">
            <summary>
            Indicates if a license is to be managed via a Distributor.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.ActivationKey">
            <summary>
            Represents the License Key of the license. It is composed of an alphanumeric
            string of 25 characters, grouped by 5. Each group is separated by a "-". 
            </summary>
            <remarks>Certain characters, for example, "I", "0" are not used in the activation key.</remarks>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.VirtualMachinesAllowed">
            <summary>
            Indicates if the license can be used on Virtualized Execution Environments
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.IsRenewable">
            <summary>
            Indicates if the license is renewable.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.LicenseLevel">
            <summary>
            Returns the license level (Evaluation/Commercial) of the license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.EvaluationReminderType">
            <summary>
            Returns the evaluation reminder type for the license.
            Applicable only in cases where the LicenseLevel is "Evaluation".
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.LicenseStoreType">
            <summary>
            Specifies the type of device to which the license is bound.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.Limitations">
            <summary>
            Represents the global license limitations. Global limitations apply to
            the "execute" feature.
            </summary>
            <remarks>The "execute" feature is a feature attached to every license 
            implicitly. It cannot be viewed in any other way.</remarks>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.Features">
            <summary>
            Represents the collection of licensed features.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.LicenseRevision">
            <summary>
            Returns the current license revision.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseData.CustomTags">
            <summary>
            Represents a collection of Custom Tag objects attached to 
            the license. Each custom tag has two fields - Name and Value. The 
            information in these tags can be customized.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseData"/>
        </member>
        <member name="T:Microsoft.Licensing.IStreamWriteable">
            <summary>
             This interface exposes functionality to write contents to a stream. 
            </summary>
             <seealso cref="T:Microsoft.Licensing.IStreamLoadable"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.IByteArrayWriteable">
            <summary>
             This interface provides a mechanism to write to memory.
            </summary>
             <seealso cref="T:Microsoft.Licensing.IByteArrayReadable"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ILicense.Uninstall">
            <summary>
            Uninstalls the license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.LicenseStore">
            <summary>
            Returns the <see cref="T:Microsoft.Licensing.ILicenseStore"/> object on which the license is installed.
            Returns null if the license is not installed on any store.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.IsInstalled">
            <summary>
            Indicates if a license is installed on a License Store.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.IsLocal">
            <summary>
            Indicates whether the license is local, or, obtained from a Distributor.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.State">
            <summary>
            Returns the state of the license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.IsValid">
            <summary>
            Indicates if the license state is valid.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.InGracePeriod">
            <summary>
            Indicates if the license is currently in grace period.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.LockedFeatures">
            <summary>
            Specifies a collection of currently held locks for license features.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.FeaturesRuntimeData">
            <summary>
            Specifies a collection of <see cref="T:Microsoft.Licensing.IFeatureRuntimeData"/> objects that apply 
            to the license features.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicense.ActualExpirationDate">
            <summary>
            Returns the expiration date based on the license limitation and install date.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicense"/>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseCollection">
             <summary>
             This interface represents a collection of <see cref="T:Microsoft.Licensing.ILicense"/> objects.
             </summary>
            <seealso cref="N:Microsoft.Licensing"/> 
        </member>
        <member name="M:Microsoft.Licensing.ILicenseCollection.Contains(System.String)">
            <summary>
            Verifies if an <see cref="T:Microsoft.Licensing.ILicense"/> object with a specified License Key exists in the collection.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseCollection"/> 
            <param name="id">License Key.</param>
            <returns>True, if License with specified License Key was found in the 
            collection. False, otherwise.</returns>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseCollection.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.ILicense"/> object by index.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseCollection"/> 
            <param name="index">Zero-based index in the collection. Must be less than 
            <see cref="P:System.Collections.ICollection.Count"/>.</param>
            <returns><see cref="T:Microsoft.Licensing.ILicense"/> object at a particular index.</returns>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseCollection.Item(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.Licensing.ILicense"/> object by License Key.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseCollection"/> 
            <param name="id">License Key of <see cref="T:Microsoft.Licensing.ILicense"/> object.</param>
            <returns><see cref="T:Microsoft.Licensing.ILicense"/> object with the provided License Key. Returns 
            null, if a ILicense object with specified License Key was not found.</returns>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureUsageData">
            <summary>
            For internal use.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureUsageData.FeatureName">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureUsageData"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureUsageData.UsageCount">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureUsageData"/>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseRequestData">
            <summary>
            Represents an interface for accessing license request information.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequest"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestData.GetLicenseStore(System.String)">
            <summary>
            Returns a license store based on the store id provided.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequestData"/>
            <param name="storeId">The Id of the license store to be retrieved.</param>
            <returns>A license store object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestData.GetLicenseStores(Microsoft.Licensing.LicenseStoreType)">
            <summary>
            Returns license stores of a specified type. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequestData"/>
            <param name="storeType">Represents a device-type from the enumeration <see cref="T:Microsoft.Licensing.LicenseStoreType"/>.</param>
            <returns>An array of license stores of specified type.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestData.GetUsageCounters">
            <summary>
            Returns the usage counters state of the license in case of reactivation.
            </summary>
            <remarks>
            The data will be added to the request during creation in case a license was installed
            previously and is being reactivated. Only usage counters of features with the Gather Usage flag set
            will be added to the request.
            </remarks>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequestData"/>
            <returns>A list of IFeatureUsageData objects that describe feature usage state for each feature</returns>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestData.FormatAsManualActivationRequest">
            <summary>
            Generate a manual activation request string to be transported via an out of band mechanism to the server
            e.g. to be pasted into the manual activation form on the website
            </summary>
            <returns>the formatted block, as generated via the standard activation wizard</returns>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseRequestData.ActivationKey">
            <summary>
            Returns the activation key associated with the request when it was created.  
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequestData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseRequestData.LicenseStores">
            <summary>
            Returns the list of license stores that are part of the request. 
            Refer to <see cref="T:Microsoft.Licensing.LicenseStoreType"/> for the available license store types.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequestData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseRequestData.CustomTags">
            <summary>
            Represents a collection of Custom Tag objects attached to 
            the license request. Each custom tag has two fields - Name and Value. The tags provide
            ability to pass a user-defined information to the Software Potential service during activation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequestData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseRequestData.ClientDateTime">
            <summary>
            Returns the date/time of the request creation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequestData"/>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseRequestBuilder">
            <summary>
            This interface represents a runtime license request builder.
            It exposes a number of methods necessary for the creation of runtime license request objects.    
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestBuilder.AddAvailableLicenseStores">
            <summary>
            Adds all license stores available on the machine to license request.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestBuilder.AddLicenseStore(Microsoft.Licensing.ILicenseStore)">
            <summary>
            Adds a license store to the request by object.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequest"/>
            <param name="store">ILicenseStore object to be added to request.</param>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestBuilder.AddLicenseStore(Microsoft.Licensing.LicenseStoreType,System.String)">
            <summary>
            Adds a license store to the request by store type and id.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseRequest"/>
            <param name="storeType">Represents a store-type from the enumeration <see cref="T:Microsoft.Licensing.LicenseStoreType"/>.</param>
            <param name="storeId">The id of the license store to be added.</param>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestBuilder.AddCustomTag(System.String,System.String)">
            <summary>
            Sets a Custom Tag object attached to 
            the license request. Each custom tag has two fields - Name and Value. The tags provide
            ability to pass a user-defined information to Software Potential service during activation.
            </summary>
            <remarks>
            It is possible to add up to 10 Custom Tags to license request object.
            </remarks>
            <param name="tagName">The name of Custom Tag. Should not exceed 50 characters.</param>
            <param name="tagValue">The value of the Custom Tag. Should not exceed 4000 characters.</param>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseRequestBuilder.CreateRequest">
            <summary>
            Builds and returns a license request object.
            </summary>
            <returns>A "read-only", fully initialized <see cref="T:Microsoft.Licensing.ILicenseRequest"/> object.</returns>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseRequest">
            <summary>
            This interface represents a License request. During the activation process, the 
            client provides a License request to the Software Potential service. Information regarding 
            local license stores should be part of the request.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.LicenseStoreState">
            <summary>
            Describes the License Device state.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseStoreState.Valid">
            <summary>
            Specifies that the License Store is valid.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseStoreState"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseStoreState.Failure">
            <summary>
            Specifies that the license store is present, but cannot function properly. This may happen,
            for example, if hardware and software parameters that are required for store Id generation cannot be read.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseStoreState"/>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseStore">
            <summary>
            This interface represents a license store on which Software Potential system licenses can be installed.
            The License store hosts persistent licensing information. The interface exposes 
            properties to fetch information related to the store.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseStore.StoreType">
            <summary>
            This represents a device-type from the enumeration <see cref="T:Microsoft.Licensing.LicenseStoreType"/>.  
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseStore"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseStore.State">
            <summary>
            Indicates the License device state.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseStore"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseStore.StoreId">
            <summary>
            Indicates the device Id. The license can lock to this device only when 
            this Id matches <see cref="P:Microsoft.Licensing.ILicenseData.LicenseStoreId"/>.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseStore"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseStore.InstalledLicenses">
            <summary>
            Returns a list of licenses installed on the License Device.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseStore"/>
        </member>
        <member name="T:Microsoft.Licensing.ILimitations">
            <summary>
            This interface represents the limitations of licensed feature(s).
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ILimitations.IsUnlimited(System.Object)">
            <summary>
            Utility method that verifies whether or not a value has a limit.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILimitations"/>
            <param name="limitValue">Limit value object of type uint, DateTime or TimeSpan.</param>
            <returns>True, if the limit value is considered unlimited. False, otherwise.</returns>
        </member>
        <member name="P:Microsoft.Licensing.ILimitations.ExpireDate">
            <summary>
            Returns the feature expiration date.
            The feature is not valid after this date, provided there is no grace period. 
            A grace period extends the validity of the feature after ExpireDate. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILimitations"/>
        </member>
        <member name="P:Microsoft.Licensing.ILimitations.GracePeriod">
            <summary>
            Returns the grace period for the feature.
            The feature remains valid for the duration of the grace period after ExpireDate. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILimitations"/>
        </member>
        <member name="P:Microsoft.Licensing.ILimitations.WorkingTimeLimit">
            <summary>
            Represents the maximum time for which the feature can be locked.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILimitations"/>
        </member>
        <member name="P:Microsoft.Licensing.ILimitations.TotalUsageLimit">
            <summary>
            Represents the maximum use count for the feature.
            When feature use count reaches this value, it will not
            be incremented any more. The feature is not valid thereafter.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILimitations"/>
        </member>
        <member name="P:Microsoft.Licensing.ILimitations.ConcurrentUsageLimit">
            <summary>
            Represents the number of maximum concurrent locks for the feature.
            When the concurrent usage limit is reached, additional feature lock
            requests will fail.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILimitations"/>
        </member>
        <member name="P:Microsoft.Licensing.ILimitations.ExpirationPeriod">
            <summary>
            Returns the time period for which the feature remains valid since the license
            was installed. This property applies to Resident licenses with
            Activation Type = "None"
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILimitations"/>
        </member>
        <member name="T:Microsoft.Licensing.LicenseLevel">
            <summary>
            Describes whether the License is an Evaluation or Commercial license.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseLevel.Evaluation">
            <summary>
            Specifies that the license is an Evaluation license. An Evaluation license cannot co-exist with a
            Commercial license, for the same product. An Evaluation license cannot be installed
            if a Commercial license was already installed for the same product. When
            a Commercial license is installed, any existing Evaluation license is removed
            automatically.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseLevel"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseLevel.Commercial">
            <summary>
            Specifies that the license is a Commercial license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseLevel"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseLevel.Unspecified">
            <summary>
            Used for filtering. It returns licenses with any level.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseLevel"/>
        </member>
        <member name="T:Microsoft.Licensing.LicenseStoreType">
            <summary>
            This describes the device types to which the license is locked.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseStoreType.Unspecified">
            <summary>
            Used in filtering queries to specify that any device type can be accepted.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseStoreType"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseStoreType.Machine">
            <summary>
            Machine license store allows locking of a license to machine. 
            The licensing information is stored by default in computer Registry.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseStoreType"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseStoreType.NoLock">
            <summary>
            A license that is locked to NoLock device is practically not locked to anything.
            The licensing information is stored by default in computer Registry.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseStoreType"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseStoreType.Memory">
            <summary>
            A license that is locked to NoLock device is practically not locked to anything.
            The licensing information is stored in computer memory and is disposed when
            SLMRuntime instance is disposed.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseStoreType"/>
        </member>
        <member name="F:Microsoft.Licensing.LicenseStoreType.IIsWebVirtualDir">
            <summary>
            Allows locking to IIS Web Site or Virtual Directory.
            The licensing information is stored by default in computer Registry.
            </summary>
            <seealso cref="T:Microsoft.Licensing.LicenseStoreType"/>
        </member>
        <member name="T:Microsoft.Licensing.IByteArrayReadable">
            <summary>
             This interface exposes functionality to load the activation key from memory.
            </summary>
             <seealso cref="T:Microsoft.Licensing.IByteArrayWriteable"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.IStreamLoadable">
            <summary>
             This interface provides a mechanism to load the contents of an open stream.
            </summary>
             <seealso cref="T:Microsoft.Licensing.IStreamWriteable"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.IFileLoadable">
            <summary>
             This interface provides a mechanism to load the contents of an existing file. 
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.IXmlWriteable">
            <summary>
             This interface provides a mechanism to write XML data to streams or files.
            </summary>
             <seealso cref="T:Microsoft.Licensing.IXmlReadable"/>
             <seealso cref="T:Microsoft.Licensing.IXmlPersistent"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.IXmlReadable">
            <summary>
             This interface exposes functionality to access (read) XML data. The access to XML data is forward-only. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.IXmlWriteable"/>
             <seealso cref="T:Microsoft.Licensing.IXmlPersistent"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.IXmlPersistent">
            <summary>
             This interface implements the <see cref="T:Microsoft.Licensing.IXmlWriteable"/> and <see cref="T:Microsoft.Licensing.IXmlReadable"/> interfaces. 
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Slps.ProtectionAttributes.FeatureAttribute">
            <summary>
            Indicates that the marked method should have protection applied and, optionally if licensing is enabled, additionally require a license to execute 
            </summary>
        </member>
        <member name="M:Slps.ProtectionAttributes.FeatureAttribute.#ctor">
            <summary>
            Indicates that the marked method should have Protection applied during Code Protector execution.
            Requires the 'Execute' feature to be present on a supporting license at execution time 
            (i.e., When Licensing is Enabled, requires a valid license for the Product but does not require any specific feature to be present on that license).
            
            Note: If Licensing is Disabled in your Code Protector Settings, Methods associated with this attribute will not be restricted.
            </summary>
        </member>
        <member name="M:Slps.ProtectionAttributes.FeatureAttribute.#ctor(System.String)">
            <summary>
            Indicates that the marked method should have Protection applied during Code Protector execution.
            Requires the indicated <param name="featureName"></param> feature to be available on a supporting Product License at execution time.
            </summary>
        </member>
        <member name="T:Slps.ProtectionAttributes.ProtectAttribute">
            <summary>
            Indicates that the marked method should have protection applied.
            </summary>
            <remarks>
            Use <see cref="T:Slps.ProtectionAttributes.FeatureAttribute"/> instead if you intend to add Licensing to your method.
            Methods protected using <see cref="T:Slps.ProtectionAttributes.ProtectAttribute"/> do not incur Licensing checks and are therefore faster to execute.
            </remarks>
        </member>
        <member name="M:Slps.Engine.Persistence.ReflectionUtil2_Persistence.IsClassType(System.Type)">
            An explicit test for "System.Enum" is required in order
            to work-around what seems to be a bug in the CLR framework:
            "typeof(System.Enum).IsClass" returns "false", even though 
            "System.Enum" inherits from "System.ValueType" and 
            "typeof(System.ValueType).IsClass" return "true" (as expected).
            This observed behavior contradicts the explicit documentation 
            regarding the "Type.IsClass" property which stipulates: 
            "This property returns true for Type instances representing Enum 
            and ValueType."
            Do not confuse this with actual enumeration types which return
            "false" for the IsClass in any case (as expected).
        </member>
        <member name="M:Slps.Engine.Persistence.ReflectionUtil2_Persistence.IsValueType(System.Type)">
            Though "typeof(Enum).IsValueType" returns "false" as expected, we still 
            should use this method (for consistency and clarity) due to the problem 
            described in  IsClassType().
            Do not confuse this with actual enumeration types which return
            "true" for the IsValueType in every case (as expected).
        </member>
        <member name="M:Slps.Engine.Persistence.ReflectionUtil2_Persistence.IsPrimitiveType(System.Type)">
            <summary>
            Only for streaming! (Not a real primitive type test)
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWS.ActivationWS">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.#ctor">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.ImportTypes(Microsoft.Licensing.ActivationWS.ActivationError,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.ImportTypesAsync(Microsoft.Licensing.ActivationWS.ActivationError,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.ImportTypesAsync(Microsoft.Licensing.ActivationWS.ActivationError,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.ActivateLicense(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.ActivateLicenseAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.ActivateLicenseAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.ActivationWS.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Microsoft.Licensing.ActivationWS.ActivationWS.ImportTypesCompleted">
            <remarks/>
        </member>
        <member name="E:Microsoft.Licensing.ActivationWS.ActivationWS.ActivateLicenseCompleted">
            <remarks/>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.#ctor">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ImportTypes(Microsoft.Licensing.ActivationWS.ActivationError,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ImportTypesAsync(Microsoft.Licensing.ActivationWS.ActivationError,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ImportTypesAsync(Microsoft.Licensing.ActivationWS.ActivationError,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ActivateLicense(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ActivateLicenseAsync(System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ActivateLicenseAsync(System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ImportTypesCompleted">
            <remarks/>
        </member>
        <member name="E:Microsoft.Licensing.ActivationWS.BasicHttpBinding_IActivationWS1.ActivateLicenseCompleted">
            <remarks/>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWS.ActivationError">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.Success">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.CommunicationError">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.InvalidRequestData">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.NumberOfActivationsExceeded">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.LicenseDisabled">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.LicenseExpired">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.Failed">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.InternalServerError">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.DeviceChanged">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.TagsChanged">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.RenewalNotAuthorized">
            <remarks/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWS.ActivationError.InvalidVersion">
            <remarks/>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWS.ImportTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWS.ActivateLicenseCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWS.ActivateLicenseCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Microsoft.Licensing.ActivationWS.ActivateLicenseCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Microsoft.Licensing.IActivationWizard">
            <summary>
            This interface implements methods and properties to display the 
            standard Activation screen dialog.
            The activation wizard is not thread safe.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.IActivationWizard.NavigateToPage(Microsoft.Licensing.ActivationWizardPage,System.Boolean)">
            <summary>
            This method navigates to a specific wizard page. 
            Notice that no logical consistency checks are performed, and the logical 
            correctness is the sole responsibility of the caller.
            </summary>
            <param name="page">The desired (target) page.</param>
            <param name="clearPageHistory">If the "clearPageHistory" parameter flag is set,
            then the new page will effectively be considered as the first page and the end-user 
            will not be able to navigate back from it. 
            If this flag is false, then the page that was used prior to this call (if such 
            a page existed) will be added to the navigation history, and can be returned to 
            using the "Back" button.</param>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
            <seealso cref="N:Microsoft.Licensing"/>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardPage"/>
        </member>
        <member name="M:Microsoft.Licensing.IActivationWizard.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the wizard dialog using the specified parent top-level window.
            </summary>
            <remarks>A modal dialog box has to be acknowledged (e.g., by clicking "OK" or
            "Cancel") before the program can continue.</remarks>
            <param name="parent">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/>, 
            and represents the top-level window that will own the modal dialog box.</param>
            <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.</returns>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationWizard.SelectedOperation">
            <summary>
            Gets or sets the wizard mode.
            </summary>
            <returns>One of the <see cref="T:Microsoft.Licensing.ActivationWizardOperation"/> values.</returns>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationWizard.LicenseKey">
            <summary>
            Gets or sets the activation key field.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationWizard.LicenseFileName">
            <summary>
            Gets or sets the license file name (for manual license activation).
            </summary>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IActivationWizard.InstalledLicense">
            <summary>
            Returns a license that was obtained during the activation process.
            Returns null if a license was not obtained.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.PersistentStoreSupport">
            <summary>
            Typically licenses are stored in the Registry, but this behavior can be modified for specific needs.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.PersistentStoreSupport.Mandatory">
            <summary>
            The default mode to store licenses in the installer intialized registry
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.PersistentStoreSupport.Optional">
            <summary>
            Allow both locally installed licenses and pooled licenses from Distributor to be used together.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.PersistentStoreSupport.None">
            <summary>
            Licenses cannot be stored locally. i.e. Distributor and Protection Only scenarios
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.StoreLocation">
            <summary>
            With PersistentStoreSupport.Manditory, override the default Registry locations
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.StoreLocation.LegacyRegistry">
            <summary>
            Default Setting. Store in "HKEY_LOCAL_MACHINE\Software\(Wow6432Node)\Microsoft\SLP Services", Wow6432Node present for 64bit Machines.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.StoreLocation.Registry">
            <summary>
            Store in: "HKEY_LOCAL_MACHINE\Software\(Wow6432Node)\InishTech\SLP Services", Wow6432Node present for 64bit Machines.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.StoreLocation.UserProfile">
            <summary>
            Store in: "HKEY_CURRENT_USER\InishTech\SLP Services" for ClickOnce applications
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.EvaluationReminderType">
            <summary>
            Describes how an "Evaluation Reminder" is handled.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.EvaluationReminderType.EveryExecution">
            <summary>
            Specifies that Evaluation reminder is shown on every execution.
            </summary>
            <seealso cref="T:Microsoft.Licensing.EvaluationReminderType"/>
        </member>
        <member name="F:Microsoft.Licensing.EvaluationReminderType.Custom">
            <summary>
            Specifies that a custom handler be called to determine if evaluation reminder should be displayed.
            The handler should be implemented in vendor-provided Customizations DLL. The DLL 
            should contain code that subscribes and handles 
            ISLMCustomizations.OnPreEvaluationReminder event.
            </summary>
            <seealso cref="T:Microsoft.Licensing.EvaluationReminderType"/>
        </member>
        <member name="F:Microsoft.Licensing.EvaluationReminderType.None">
            <summary>
            Specifies that no evaluation reminder is displayed.
            </summary>
            <seealso cref="T:Microsoft.Licensing.EvaluationReminderType"/>
        </member>
        <member name="T:Microsoft.Licensing.ActivateStatus">
            <summary>
            Describes the client-side status of the activation operation.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivateStatus.CreatingRequest">
            <summary>
            Specifies a License Request created by client machine, for submission to the Software Potential service.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivateStatus"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivateStatus.ObtainingLicense">
            <summary>
            Specifies that communication with Software Potential service is initiated. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivateStatus"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivateStatus.InstallingLicense">
            <summary>
            Specifies that a License obtained from the Software Potential service is being installed.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivateStatus"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivateStatus.FailAndRetry">
            <summary>
            Specifies that communication Software Potential service failed, and will be retried.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivateStatus"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivateStatus.Done">
            <summary>
            Specifies the completion of activation process.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivateStatus"/>
        </member>
        <member name="T:Microsoft.Licensing.NamedUsersType">
            <summary>
            Describes the type of named users limitation for a license.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.NamedUsersType.None">
            <summary>
            Specifies that no named users limitation is set for the license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.NamedUsersType"/>
        </member>
        <member name="T:Microsoft.Licensing.ActivationClientError">
            <summary>
            Describes an error that occurs on client side during activation process.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ActivationClientError.FailedCreatingRequest">
            <summary>
            Indicates a failure during creation of license request.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ActivationClientError.InvalidLicense">
            <summary>
            Indicates that the license that was returned by server has invalid format.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ActivationClientError.ProductNameMissing">
            <summary>
            Indicates that the product name in the license was omitted. This is a special InvalidLicense case.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ActivationClientError.ProductNameMismatch">
            <summary>
            Indicates that the license that was returned by server is not matching the activated product name.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ActivationClientError.ProductVersionMismatch">
            <summary>
            Indicates that the license that was returned by server is not matching the activated product version.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ActivationClientError.FailedInstallingLicense">
            <summary>
            Indicates that a failure occurred when trying to install the license that was returned by server.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWizardPage">
            <summary>
            Describes the supported activation wizard pages that can be reached via the API.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardPage.Welcome">
            <summary>
            The activation wizard's introduction page.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardPage"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardPage.LicenseKeyEntry">
            <summary>
            The activation wizard's license activation key page.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardPage"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardPage.LicenseFileEntry">
            <summary>
            The activation wizard's license file page.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardPage"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardPage.LicenseRequestCreation">
            <summary>
            The activation wizard's license request page.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardPage"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardPage.LicenseRenewalConfirmation">
            <summary>
            The activation wizard's license renewal confirmation page.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardPage"/>
        </member>
        <member name="T:Microsoft.Licensing.ActivationWizardOperation">
            <summary>
            Describes the supported activation wizard modes.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <seealso cref="T:Microsoft.Licensing.IActivationWizard"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardOperation.OnlineActivation">
            <summary>
            Online license activation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardOperation"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardOperation.InstallLicenseFile">
            <summary>
            Install a license file.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardOperation"/>
        </member>
        <member name="F:Microsoft.Licensing.ActivationWizardOperation.RequestLicenseFile">
            <summary>
            Request a license.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ActivationWizardOperation"/>
        </member>
        <member name="T:Microsoft.Licensing.ProtectedProcessExitCode">
            <summary>
            Describes reason for protected process termination.
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ProtectedProcessExitCode.ActivationCanceled">
            <summary>
            Protected process has exited due to cancellation of activation process. 
            </summary>
        </member>
        <member name="F:Microsoft.Licensing.ProtectedProcessExitCode.NotLicensed">
            <summary>
            Protected process has exited due to lack of valid license. 
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.VirtualMachineNotAllowedException">
            <summary>
            License does not allow working in Virtualized Execution Environments
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.SessionInvalidatedException">
            <summary>
            Current Licensing session was invalidated because currently locked licensed features
            cannot be satisfied by existing licenses. This may happen if currently installed licenses
            were uninstalled or expired
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.FeatureLockException">
            <summary>
            Feature lock request cannot be satisfied.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.LimitExceededException">
            <summary>
            Usage limit for a feature was exceeded.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.RuntimeShieldException">
            <summary>
            RuntimeShield failed to execute protected assemblies.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.ExecutionCanceledException">
            <summary>
            A user canceled process execution by closing activation screen.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.StorageInaccessibleException">
            <summary>
            Thrown when storage needed for storing licensing state is not accessible.
            This may be a result of insufficient permissions for accessing Software Potential Registry keys.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.ActivationClientException">
            <summary>
            Thrown during activation process in case of a client side failure.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureLockDataCollection">
            <summary>
            This interface represents a collection of <see cref="T:Microsoft.Licensing.IFeatureLock"/> objects.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.IFeatureLockDataCollection.Contains(System.String)">
            <summary>
            Verifies if FeatureLock with specified feature name 
            exists in the collection.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLockDataCollection"/>
            <param name="name">Name of the Feature.</param>
            <returns>True, if FeatureLock with specified feature name was found in the 
            collection. False, otherwise.</returns>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureLockDataCollection.Item(System.Int32)">
            <summary>
            Returns <see cref="T:Microsoft.Licensing.IFeatureLockData"/> object by index.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLockDataCollection"/>
            <param name="index">Zero-based index in the collection. It must be less than <see cref="P:System.Collections.ICollection.Count"/>.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeatureLockData"/> object at the provided index.</returns>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureLockDataCollection.Item(System.String)">
            <summary>
            Returns <see cref="T:Microsoft.Licensing.IFeatureLockData"/> object by name.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLockDataCollection"/> 
            <param name="name">Name of the FeatureLock object.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeatureLockData"/> object with the provided name. Returns 
            null if FeatureLock object with specified name was not found.</returns>
        </member>
        <member name="T:Microsoft.Licensing.ActivateStatusEventArgs">
            <summary>
            Activation process status callback event arguments.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.ActivateStatusEventArgs.Status">
            <summary>
            Returns ongoing activation process status.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.IActivationClient">
            <summary>
            This interface exposes methods and properties that initiate synchronous or 
            asynchronous license activation on client machine, through a runtime object. 
            It also provides properties for managing the activation process on client machine.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.IActivationClient.BeginActivate(System.String,System.String)">
            <summary>
            Begin asynchronous activation process.  
            </summary>
            <param name="activationKey">Activation key, for example, 11111-11111-11111-11111-11111.</param>
            <param name="note">A free text note that describes the activation event. Can be empty.</param>
        </member>
        <member name="M:Microsoft.Licensing.IActivationClient.EndActivate">
            <summary>
            Finish asynchronous activation process. The method will block until the activation
            process is finished.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.IActivationClient.Activate(System.String,System.String)">
            <summary>
            Performs synchronous activation.
            </summary>
            <param name="activationKey">Activation key, for example, 11111-11111-11111-11111-11111.</param>
            <param name="note">A free-text note that describes the activation event. Can be empty.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if another activation is performed by the object.</exception>
            <exception cref="T:Microsoft.Licensing.InvalidLicenseKeyException">Thrown if the provided license key has invalid format.</exception>
            <exception cref="T:Microsoft.Licensing.ActivationServerException">Thrown in case of a server side failure during activation process.</exception>
            <exception cref="T:Microsoft.Licensing.ActivationClientException">Thrown in case of a client error during activation process.</exception>
            <exception cref="T:Microsoft.Licensing.VirtualMachineNotAllowedException">Thrown if another activation is performed by the object.</exception>
        </member>
        <member name="P:Microsoft.Licensing.IActivationClient.Status">
            <summary>
            Returns the current status of ongoing activation process.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.IActivationClient.InstalledLicense">
            <summary>
            Returns a license that was installed during activation process.
            Null is returned if no license was installed.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.IActivationClient.Canceled">
            <summary>
            The activation process was canceled.
            Cancelling can be done by customization code.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.IActivationClient.ActivationException">
            <summary>
            Returns Exception object if an error occurred during activation process.
            Returns null if activation process finished successfully.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.ActivationServerException">
            <summary>
            Thrown during activation process in case a server denies the activation request, has an internal problem
            or cannot be accessed.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureLock">
            <summary>
            This represents the interface to manage feature locks. It is owned by the 
            application that calls method LockFeature from <see cref="T:Microsoft.Licensing.ILicenseSession"/>.
            </summary>
            <remarks>The data related to the feature locks is described by 
            <see cref="T:Microsoft.Licensing.IFeatureLockData"/>. This data is "Read-only", and enables monitoring
            information on currently held locks.</remarks>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="T:Microsoft.Licensing.IFeatureLockData">
            <summary>
            This interface represents information of runtime Feature Lock(s) by a user 
            License Session. It can represent multiple locks of the same feature. The 
            locks should come from the same license.
            </summary>
            <remarks>Locks are used for managing concurrency. Holding/Releasing a lock
            is application-specific. When an application starts, it locks the "execute"
            feature. The lock is released when the application terminates. 
             
            It is possible to monitor which applications are running, and which features 
            are locked. Locks can be monitored in the following ways:
            
            1) Get a list of <see cref="T:Microsoft.Licensing.IFeatureLockData"/> for each session, from 
            <see cref="T:Microsoft.Licensing.ILicenseSessionData"/>. The <see cref="T:Microsoft.Licensing.ISLMStatus"/> interface provides 
            a list of open sessions.
            2) From each license, query the locks in effect,  from <see cref="P:Microsoft.Licensing.ILicenseSessionData.LockedFeatures"/>.
            3) Query each session to confirm the locked status of a particular feature.
            </remarks>
            <seealso cref="T:Microsoft.Licensing.IFeatureLock"/>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureLockData.FeatureName">
            <summary>
            Specifies the feature name to which the lock applies.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLock"/>
            <seealso cref="T:Microsoft.Licensing.IFeatureLockData"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureLockData.LicenseKey">
            <summary>
            Represents the activation key of a license associated with the feature lock.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLock"/>
            <seealso cref="T:Microsoft.Licensing.IFeatureLockData"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureLockData.Count">
            <summary>
            Specifies the number of feature locks. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLock"/>
            <seealso cref="T:Microsoft.Licensing.IFeatureLockData"/>
        </member>
        <member name="M:Microsoft.Licensing.IFeatureLock.Release">
            <summary>
            Releases the Feature lock.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLock"/>
        </member>
        <member name="P:Microsoft.Licensing.IFeatureLock.IsLockValid">
            <summary>
            Indicates if the lock is still valid.
            </summary>
            <seealso cref="T:Microsoft.Licensing.IFeatureLock"/>
        </member>
        <member name="T:Microsoft.Licensing.LicenseSessionEvent">
            <summary>
            Represents a method that handles license session events.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <remarks>
            One scenario where this delegate can be used is to handle a session invalidation event.
            </remarks>
            <param name="licSession">A license session object to which the event relates.</param>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseSessionData">
            <summary>
            This interface represents the client License session information.
            A License session holds the context of the software product it was opened for.
            Feature locks are associated with the session, and are released automatically
            when the session is closed.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSessionData.GetFeatureLockCount(System.String)">
            <summary>
            Returns the number of locks of the specified feature in the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
            <param name="featureName">Indicates the feature name.</param>
            <returns>A non-negative integer, specifying the feature lock count.</returns>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.SessionId">
            <summary>
            Specifies the unique Id of the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.VendorName">
            <summary>
            Specifies the vendor name of the licensed software that owns the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.ProductName">
            <summary>
            Specifies the product name of the licensed software that owns the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.ProductVersion">
            <summary>
            Specifies the product version of the licensed software that owns the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.ProcessId">
            <summary>
            Specifies the process Id of the licensed software that owns the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.ProcessName">
            <summary>
            Specifies the process name of the licensed software that owns the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.UserName">
            <summary>
            Specifies the name of the Windows user owning the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.MachineName">
            <summary>
            Specifies the name of the machine that opened the session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.OpenTime">
            <summary>
            Indicates the time when session was opened.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="P:Microsoft.Licensing.ILicenseSessionData.LockedFeatures">
            <summary>
            Specifies the list of Feature locks of the license session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSessionData"/>
        </member>
        <member name="T:Microsoft.Licensing.ILicenseSession">
            <summary>
            This interface represents the client License session.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.IsValid">
            <summary>
            Indicates whether or not the session is valid.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <returns>True, if the session is valid. False, otherwise.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.LockFeature(System.String,System.Boolean)">
            <summary>
            Locks the specified feature.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureName">Name of the feature to be locked.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock 
            request cannot be satisfied. If false, returns null.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeatureLock"/> object.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for feature 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.LockFeature(System.String,System.UInt32,System.Boolean)">
            <summary>
            Locks the specified feature, and increments the usage counter by a specified value.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureName">Name of the feature to be locked.</param>
            <param name="incrementUsageBy">The value by which usage count should be 
            incremented. It can be 0.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock request 
            cannot be satisfied, or usage counter cannot be incremented by the specified 
            value. If false, returns null.</param>
            <returns><see cref="T:Microsoft.Licensing.IFeatureLock"/> object.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for feature 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.LockFeatures(System.String[],System.Boolean)">
            <summary>
            Locks specified multiple features.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureNames">Names of features to be locked.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock 
            request cannot be satisfied. If false, returns null.</param>
            <returns>An array of <see cref="T:Microsoft.Licensing.IFeatureLock"/> objects. Each object in array 
            corresponds to a locked feature.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for features 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.LockFeatures(System.String[],System.UInt32,System.Boolean)">
            <summary>
            Locks the specified features, and increments the usage counter by specified value.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureNames">Names of features to be locked.</param>
            <param name="incrementUsageBy">The value by which usage count should be 
            incremented. It can be 0.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock request 
            cannot be satisfied, or usage counter cannot be incremented by the specified 
            value. If false, returns null.</param>
            <returns>An array of <see cref="T:Microsoft.Licensing.IFeatureLock"/> objects. Each object in array 
            corresponds to a locked feature.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for features 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.EnsureFeatureLocked(System.String,System.Boolean)">
            <summary>
            Ensures that specified feature is locked. Performs lock if feature is not 
            locked already. Does nothing if a feature is already locked.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureName">Name of feature to be locked.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock 
            request cannot be satisfied, or usage counter cannot be incremented. 
            If false, returns null.
            </param>
            <returns>True, if the feature is locked by the current License session. False, otherwise.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for feature 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.EnsureFeatureLocked(System.String,System.UInt32,System.Boolean)">
            <summary>
            Ensures that specified feature is locked. Performs lock if feature is not locked
            already. Does nothing if a feature is already locked. Increments the feature usage 
            counter by the value specified by "incrementUsageBy" parameter.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureName">Name of feature to be locked.</param>
            <param name="incrementUsageBy">The value by which usage count should be 
            incremented. It can be 0.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock request 
            cannot be satisfied, or usage counter cannot be incremented by the specified 
            value. If false, returns null.
            </param>
            <returns>True, if the feature is locked by the current License session. False, otherwise.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for feature 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.EnsureFeaturesLocked(System.String[],System.Boolean)">
            <summary>
            Ensures that specified features are locked. Performs lock if features are not 
            locked already. Does nothing if features are already locked.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureNames">Names of features to be locked.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock 
            request cannot be satisfied, or usage counter cannot be incremented. If false, 
            returns null.</param>
            <returns>True, if the feature is locked by the current License session. False, otherwise.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for features 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.EnsureFeaturesLocked(System.String[],System.UInt32,System.Boolean)">
            <summary>
            Ensures that specified features are locked. Performs lock if features are not 
            locked already. Does nothing if features are already locked.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureNames">Names of features to be locked.</param>
            <param name="incrementUsageBy">The value by which usage count should be 
            incremented. It can be 0.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if lock 
            request cannot be satisfied, or usage counter cannot be incremented. If false, 
            returns null.</param>
            <returns>True, if the feature is locked by the current License session. False, otherwise.</returns>
            <exception cref="T:Microsoft.Licensing.FeatureLockException">Thrown if lock request cannot be 
            satisfied.</exception>
            <exception cref="T:Microsoft.Licensing.LimitExceededException">Thrown if usage limit for features 
            was exceeded.</exception>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.IsFeatureLocked(System.String)">
            <summary>
            Verifies if the specified feature is locked by the current License session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureName">Name of the feature whose lock status needs to be 
            verified.</param>
            <returns>True, if the feature is locked by the current License session. False, 
            otherwise.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.IncUsageCounter(System.String,System.UInt32,System.Boolean)">
            <summary>
            Increments usage counter for the specified feature.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
            <param name="featureName">Name of the feature.</param>
            <param name="count">Value by which counter needs to be incremented.</param>
            <param name="throwOnFailure">If true, an exception will be thrown if  
            usage counter cannot be incremented. If false, returns null.</param>
            <returns>True, if counter can be incremented. False, otherwise.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.UnlockAllFeatures">
            <summary>
            Unlocks all features locked by the current License session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"/>
        </member>
        <member name="M:Microsoft.Licensing.ILicenseSession.GetFeatureRuntimeData(System.String)">
            <summary>
            Returns <see cref="T:Microsoft.Licensing.IFeatureRuntimeData"></see> of the specified feature in the stores on this machine. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ILicenseSession"></seealso>
            <param name="feature">Name of the feature.</param>
            <returns>
            <see cref="T:Microsoft.Licensing.IFeatureRuntimeData"></see> that contains counter state of the 
            specified feature.</returns>
        </member>
        <member name="T:Microsoft.Licensing.ISLMLicenseStores">
            <summary>
            Allows management of local License stores.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenseStores.GetLicenseStore(System.String)">
            <summary>
            Returns a license store by provided storeId.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
            <param name="storeId">Id of license store.</param>
            <returns>License store object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenseStores.GetLicenseStores(Microsoft.Licensing.LicenseStoreType)">
            <summary>
            Returns a list of license stores of specified type.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
            <param name="storeType">A store type filter.</param>
            <returns>Array of license stores that match the specified type.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenseStores.IsSameStoreId(Microsoft.Licensing.LicenseStoreType,System.String,System.String)">
            <summary>
            Compares store Ids of specified store type.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
            <param name="storeType">The store type of the compared store Ids.</param>
            <param name="storeId1">Store Id #1 to compare.</param>
            <param name="storeId2">Store Id #2 to compare.</param>
            <returns>True, in case the store Ids match. False, otherwise.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenseStores.SetDisabledStoreTypes(Microsoft.Licensing.LicenseStoreType[])">
            <summary>
            Sets a list of license store types that should be ignored by the Licensing Runtime.
            The Licensing Runtime will not try to detect those stores.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
            <param name="storeTypesToDisable">An array of store types that should be ignored.</param>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenseStores.IsStoreTypeEnabled(Microsoft.Licensing.LicenseStoreType)">
            <summary>
            Verifies if a specified license store type is enabled.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
            <param name="storeType">License store-type to verify.</param>
            <returns>True, if the specified License store type is enabled. False, otherwise.</returns>
        </member>
        <member name="P:Microsoft.Licensing.ISLMLicenseStores.LocalLicenseStores">
            <summary>
            Returns a collection of license stores that are detected on the machine.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMLicenseStores.BindingNeutralStore">
            <summary>
            Returns the "Binding Neutral" license store. This store is built-in and is always available.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMLicenseStores.MachineStore">
            <summary>
            Returns the "Machine" license store. This store is built-in, and is available unless the required 
            machine hardware and software parameters cannot be read.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMLicenseStores.MemoryStore">
            <summary>
            Returns the "Memory" license store. This store is built-in and is always available.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenseStores"/>
        </member>
        <member name="T:Microsoft.Licensing.ISLMLicenses">
            <summary>
            This interface exposes functionality to manage local licenses.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.OpenActivationKey(System.String)">
            <summary>
            Creates an object that represents License Key from string representation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"/>
            <param name="key">A string representation of a License Key.</param>
            <returns>An object that represents a License Key.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.OpenLicense(System.String)">
            <summary>
            Reads a license file and returns an initialized License object.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"/>
            <param name="fileName">Name of license file (.SLMLic).</param>
            <returns>An initialized License object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.OpenLicense(System.Byte[])">
            <summary>
            Reads raw license data and returns an initialized License object.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"/>
            <param name="licenseData">Raw license data.</param>
            <returns>Initialized License object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.ReadLicense(System.IO.Stream)">
            <summary>
            Reads a license from stream and returns an initialized License object.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"/>
            <param name="stream">A stream that represents license data.</param>
            <returns>An initialized License object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.InstallLicense(Microsoft.Licensing.ILicense)">
            <summary>
            Installs a license to a local license store according to license store-type.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"/>
            <param name="license">The license to be installed.</param>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.GetLicenses">
            <summary>
            Returns a collection of licenses that are accessible within the stores on this machine.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"></seealso>
            <returns>A collection of License objects.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.GetLicenses(System.String,System.String)">
            <summary>
            Returns a collection of licenses that are accessible within the stores on this machine, filtered by product and version.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"></seealso>
            <param name="product">Product filter.</param>
            <param name="version">Product version filter.</param>
            <returns>A collection of License objects.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMLicenses.GetLicense(System.String)">
            <summary>
            Returns a License object, searched by its License Key.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMLicenses"/>
            <param name="licenseId">The License Key of the license to be returned.</param>
            <returns>A License object that matches the specified License Key. Returns null 
            if a license with the specific License key was not found.</returns>
        </member>
        <member name="T:Microsoft.Licensing.ISLMStatus">
            <summary>
            This interface exposes functionality to access license utilization status.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMStatus.QuerySessions(System.String,System.String)">
            <summary>
            Performs query of currently active licensing sessions on this machine
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMStatus"></seealso>
            <param name="productFilter">Product name filter. Can be null 
            or empty if filtering by product is not required.</param>
            <param name="versionFilter">Product version filter. Can be null or empty if 
            filtering by product is not required.</param>
            <returns>An array of ILicenseSessionData that match the provided filter.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMStatus.QueryFeaturesRuntimeData(System.String,System.String)">
            <summary>
            Performs query of features runtime information. The information includes counters status for
            each feature, available concurrent usage values, etc.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMStatus"></seealso>
            <param name="productFilter">Product name filter. Can be null or empty if 
            filtering by product is not required.</param>
            <param name="versionFilter">Product version filter. Can be null or empty if 
            filtering by product is not required.</param>
            <returns>An array of IFeatureRuntimeData that match the provided filter.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMStatus.GetFeatureRuntimeData(System.String,System.String,System.String)">
            <summary>
            Performs query of feature runtime information. The information includes counters status for
            a feature, available concurrent usage values, etc.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMStatus"></seealso>
            <param name="productName">The product name to which the feature belongs.</param>
            <param name="productVersion">The product version to which the feature belongs.</param>
            <param name="feature">The feature name.</param>
            <returns>The feature runtime information.</returns>
        </member>
        <member name="T:Microsoft.Licensing.ISLMActivation">
            <summary>
            Exposes functionality for license delivery, management 
            of different license requests and standard activation dialogs.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.GetLicenseRequestBuilder(System.String)">
            <summary>
            Creates a new license request builder. 
            </summary>
            <param name="activationKey">The license key of the license being activated.</param>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <returns>ILicenseRequestBuilder object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.OpenLicenseRequest(System.String)">
            <summary>
            Opens an existing license request from file.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="fileName">The file name of license request.</param>
            <returns>ILicenseRequest object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.OpenLicenseRequestString(System.String)">
            <summary>
            Opens an existing license request from string representation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="licenseRequestString">The string representation of license request.</param>
            <returns>ILicenseRequest object.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.OpenLicenseRequest(System.Byte[])">
            <summary>
            Opens an existing license request from a blob.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="requestData">Binary representation of license request.</param>
            <returns>An object representing a license request.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.OpenLicenseRequest(System.Byte[],System.Int32@)">
            <summary>
            Opens an existing license request from a blob, yielding the runtime version with which it was created as a side effect.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="requestData">Binary representation of license request.</param>
            <param name="build">The Build number the License Request was created with.</param>
            <returns>An object representing a license request.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.ReadLicenseRequest(System.IO.Stream)">
            <summary>
            Opens an existing license request from stream.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object.</param>
            <returns>An object representing a license request.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.CreateActivationClient(System.String,System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Opens an activation session for a specified product. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="productName">The name of product to activate.</param>
            <param name="productVersion">The version of product to activate.</param>
            <param name="parentWindow">A parent window object (optional).</param>
            <returns>ActivationClient object, which enables performing programmatic activation.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.CreateActivationClient(System.String,System.String)">
            <summary>
            Opens an activation session for a specified product.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="productName">The name of product to activate.</param>
            <param name="productVersion">The version of product to activate.</param>
            <returns>ActivationClient object, which enables performing programmatic activation.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMActivation.CreateActivationDialog(System.String,System.String)">
            <summary>
            Creates the standard activation dialog object.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
            <param name="productName">Name of the product to activate.</param>
            <param name="productVersion">Version of the product to activate.</param>
            <returns>An object that represents the activation screen dialog.</returns>
        </member>
        <member name="P:Microsoft.Licensing.ISLMActivation.ActivationServers">
             <summary>
            Returns a list of activation servers according to the currently loaded
            permutation. The list contains server DNS names or IP addresses. 
             </summary>
             <seealso cref="T:Microsoft.Licensing.ISLMActivation"/>
        </member>
        <member name="T:Microsoft.Licensing.ISLMVirtualRegistry">
            <summary>
            A custom License Data storage can be provided by implementing ISLMVirtualRegistry interface.
            The custom License Data storage implementation can be set in customizations, by subscribing on
            SLMRuntime.Customizations.OnGetVirtualRegistry event. The storage redirection affects 
            License stores of the following types: "Machine", "No Lock", "IIs Web Virtual Dir"
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMVirtualRegistry.VirtualRegistryReadValue(System.String,System.String,System.Boolean@)">
            <summary>
            Custom License Data storage read handler.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMVirtualRegistry"/>
            <param name="path">Path in the Virtual Registry. Provide empty path for root.</param>
            <param name="entryName">The entry name.</param>
            <param name="done">If the parameter is set to true during the handler execution, the returned data is considered meaningful. 
            Otherwise it is ignored and a standard License Data storage is accessed.</param>
            <returns>The requested data value.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMVirtualRegistry.VirtualRegistryWriteValue(System.String,System.String,System.Object,System.Boolean@)">
            <summary>
            Custom License Data storage write handler.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMVirtualRegistry"/>
            <param name="path">Path in the Virtual Registry. Provide empty path for root.</param>
            <param name="entryName">The entry name.</param>
            <param name="entryValue">The value of the entry that will be written.</param>
            <param name="done">If the parameter is set to true during the handler execution, the data is considered written. 
            Otherwise a standard License Data storage is accessed.
            </param>
        </member>
        <member name="M:Microsoft.Licensing.ISLMVirtualRegistry.IsStorageAccessible">
            <summary>
            Verifies if the storage that is used by the Virtual Registry implementation is accessible.
            For example, if a file is used to store the Virtual Registry data, the method may return
            true if the file is accessible and can we written and false if there's no permissions to access
            the file or the file location is not accessible.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMVirtualRegistry"/>
            <returns>True, if the Virtual Registry storage can be accessed. False, otherwise.</returns>
        </member>
        <member name="M:Microsoft.Licensing.ISLMVirtualRegistry.ConfigurePermissions">
            <summary>
            Triggered via the Runtime's Installation mechanism, see http://support.inishtech.com/kb7
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.GetVirtualRegistryHandler">
            <summary>
            Represents a method that provides a custom implementation of <see cref="T:Microsoft.Licensing.ISLMVirtualRegistry"/>.   
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <returns>A custom implementation of <see cref="T:Microsoft.Licensing.ISLMVirtualRegistry"/></returns>
        </member>
        <member name="T:Microsoft.Licensing.NoLicenseHandler">
            <summary>
            Represents a method that handles an event when there is no valid license to execute the application. 
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <param name="sender">Always null.</param>
            <param name="args">Events arguments object.</param>
        </member>
        <member name="T:Microsoft.Licensing.MethodExecutionAbandonedHandler">
            <summary>
            Represents a method that handles an event that overrides the default behavior in case a license is not available to execute 
            a protected method.  
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <remarks>
            Using this delegate, it is possible to skip protected method execution and return to the caller without throwing an exception in case 
            a license is not available to execute a protected method. This behavior might be desired in some scenarios.
            </remarks>
            <param name="methodBase">Represents the protected method whose execution was abandoned due to absence of a valid license.</param>
            <param name="details">A message that describes the reason why the protected method execution was abandoned.</param>
            <param name="methodReturnValue">This parameter is optional. If set during the event execution, it will be returned to
            the caller of the protected method. The data type of the value should match the return type of the protected method.</param>
            <param name="suppressAutomaticException">If set to true during event execution, no exception will be thrown when the protected
            method execution is abandoned and the control will be returned to the caller of the protected method.</param>
        </member>
        <member name="T:Microsoft.Licensing.PreEvaluationReminderHandler">
            <summary>
            Represents a method that handles an event of displaying evaluation reminder UI. 
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <remarks>
            It is possible to display a custom evaluation reminder UI in this event.
            The event is called if Evaluation Reminder Type property of the protected application is set to "Every Execution" or "Custom".
            Refer to <see cref="T:Microsoft.Licensing.EvaluationReminderType"/> for more details.
            </remarks>
            <param name="showStandardReminder">If set to true during the event execution, a standard evaluation reminder UI will be displayed.
            If set to false, the standard evaluation reminder UI will not be displayed.</param>
        </member>
        <member name="T:Microsoft.Licensing.NoLicenseHandlerArgs">
            <summary>
            Represents arguments of ISLMCustomizations.OnNoValidLicenses, ISLMCustomizations.OnConcurrentUsageExceeded, ISLMCustomizations.OnTotalUsageExceeded events.
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.NoLicenseHandlerArgs.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.NoLicenseHandlerArgs.VendorName">
            <summary>
            Name of the vendor of the requested license.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.NoLicenseHandlerArgs.ProductName">
            <summary>
            Product name of the requested license.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.NoLicenseHandlerArgs.ProductVersion">
            <summary>
            Product version name of the requested license.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.NoLicenseHandlerArgs.Cancel">
            <summary>
            This flag can be set to True in implementations of ISLMCustomizations.OnNoValidLicenses, 
            ISLMCustomizations.OnConcurrentUsageExceeded, ISLMCustomizations.OnTotalUsageExceeded
            in order to indicate that application execution should not abandoned after the event.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.ISLMCustomizations">
            <summary>
            Provides access to customizations objects.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="E:Microsoft.Licensing.ISLMCustomizations.OnGetVirtualRegistry">
            <summary>
            Allows providing of custom License Data storage and store licensing data in various sources
            like database or file system. The standard License Data storage uses Windows Registry.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
        </member>
        <member name="E:Microsoft.Licensing.ISLMCustomizations.OnNoValidLicenses">
            <summary>
            Invoked when no valid license is available to load the assembly or execute a protected method.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
        </member>
        <member name="E:Microsoft.Licensing.ISLMCustomizations.OnConcurrentUsageExceeded">
            <summary>
            Invoked when concurrent usage limitation is exceeded for application.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
        </member>
        <member name="E:Microsoft.Licensing.ISLMCustomizations.OnTotalUsageExceeded">
            <summary>
            Invoked when total usage limitation is exceeded for application.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
        </member>
        <member name="E:Microsoft.Licensing.ISLMCustomizations.OnMethodExecutionAbandoned">
            <summary>
            Invoked when a protected method execution was abandoned because a valid license was not found,
            and ISLMCustomizations.OnNoValidLicenses handler did not resolve the situation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
        </member>
        <member name="E:Microsoft.Licensing.ISLMCustomizations.OnPreEvaluationReminder">
            <summary>
            Invoked before the evaluation reminder dialog is displayed. Allows customization of evaluation reminder
            dialog look and feel, as well as canceling the dialog display.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
        </member>
        <member name="T:Microsoft.Licensing.ISLMRuntimeFactory">
            <summary>
            Implemented by SLMRuntimeFactory class.
            Required only for COM creation of the SLMRuntime (since COM cannot "see"
            the parameterized constructors or the static helper constructor methods
            of SLMRuntime).
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMRuntimeFactory.CreateSLMRuntime">
            <summary>
            The CreateSLMRuntime() creates a SLMRuntime object based on the current value of 
            the PermutationShortId, AssociatedAssembly and CacheByAssembly values.
            If the CacheByAssembly is set to true and a SLMRuntime object was created previously 
            for the AssociatedAssembly then this method will not create a new instance, but will 
            return the cached object value instead.
            IMPORTANT:
            - If the SLMRuntime object was created with the CacheByAssembly property set to true, 
            the caller must NOT dispose of the obtained object. 
            - If the SLMRuntime object was created with the CacheByAssembly property set to false, 
            the user MUST call the Dispose method of this object when done using it.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeFactory"/>
            <returns>
            The corresponding SLMRuntime object. 
            </returns>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeFactory.PermutationShortId">
            <summary>
            The PermutationShortId property is a string that represents the 
            first 5 digits of the full hexadecimal permutation Id (which is a GUID). 
            These digits can be seen in the name of the relevant permutation assembly 
            between the last two underscore ("_") characters. 
            E.g.: the short permutation Id "1cc06" correlates to 
            "Microsoft.Licensing.Permutation_1cc06_2.0.dll".
            
            Setting the value of the PermutationShortId applies only to the permutations 
            generated from that moment on using the CreateSLMRuntime() method.
            
            If the PermutationShortId is set to an empty string or null (default) then an attempt 
            to automatically detect the permutation Id is made when CreateSLMRuntime()
            is called, based on the associated assembly (AssociatedAssembly) if this 
            associated assembly was protected using the code protector.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeFactory"/>
            <InternalNotesOnly CARE="FOR INTERNAL USE ONLY">
            1. The master permutation's name does not contain the permutation short Id.
            2. If no PermutationShortId was defined and the AssociatedAssembly does not
            have a header then the CreateSLMRuntime() will use the master permutation short Id
            ("b0eb8").
            3. In none-DEBUG versions this property is ignored if the CacheByAssembly property 
            is set to true and the SLMRuntime was cached previously for the given assembly. 
            In DEBUG mode a verification of this value against the one stored in the cached 
            SLMRuntime exists.
            </InternalNotesOnly>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeFactory.AssociatedAssembly">
            <summary>
            The AssociateAssembly property is used to associate an assembly with the SLMRuntime 
            object that is requested. 
            This association can be used for automatic extraction of the PermutationShortId 
            (when no permutation Id was supplied, on condition that the assembly was protected
            by the Code Protector). In addition this association is required for cases where the 
            CacheByAssembly property is set to true.
            NOTE: If the AssociatedAssembly is left as null, it is effectively equivalent to
            setting it to the assembly of the Microsoft.Licensing.Runtime itself.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeFactory"/>
            <InternalNotesOnly CARE="FOR INTERNAL USE ONLY">
            1. The reason that when the AssociatedAssembly is left as null, it is effectively 
            equivalent to setting it to the assembly of the Microsoft.Licensing.Runtime itself, is that
            the CreateSLMRuntime() calls the SLMRuntime constructor which fills it with 
            Assembly.CallingAssembly() when it is null.
            </InternalNotesOnly>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeFactory.CacheByAssembly">
             <summary>
             The CacheByAssembly property indicates if the SLMRuntime that will 
             be obtained via the CreateSLMRuntime() method will pass through a 
             caching mechanism per associated assembly (see the AssociateAssembly property) or not.
             If the CacheByAssembly property is set to false, no caching will be used 
             when generating the SLMRuntime object.
             If the CacheByAssembly property is set to true, a caching 
             mechanism will be used. The key to the hash will be the associated assembly. 
            
             Caching details:
             If during the call to CreateSLMRuntime() it is detected that a SLMRuntime object 
             was never created for the defined associated assembly (in the running process) then a 
             new instance will be created upon this call to CreateSLMRuntime(), stored in the 
             cache and returned to the user.
             If during the call to CreateSLMRuntime() it is detected that a SLMRuntime object 
             has been created previously for the associated assembly (in the running process)
             then this cached instance will be returned to the caller.
             </summary>
             <seealso cref="T:Microsoft.Licensing.ISLMRuntimeFactory"/>
        </member>
        <member name="T:Microsoft.Licensing.ISLMRuntime">
            <summary>
            Represents the Software Potential Licensing runtime. Implemented by SLMRuntime class.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMRuntime.OpenSession(System.String,System.String)">
            <summary>
            Opens a session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
            <param name="product">Product name as defined in License Management System.</param>
            <param name="version">Product version as defined in License Management System.</param>
        </member>
        <member name="M:Microsoft.Licensing.ISLMRuntime.OpenSession(System.String,System.String,Microsoft.Licensing.LicenseSessionEvent)">
            <summary>
            Opens a session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
            <param name="product">Product name as defined in License Management System.</param>
            <param name="version">Product version as defined in License Management System.</param>
            <param name="invalidateHandler">A callback that is triggered when a session becomes invalid.</param>
        </member>
        <member name="M:Microsoft.Licensing.ISLMRuntime.CloseSession">
            <summary>
            Closes the currently open session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.LicenseStores">
            <summary>
            Provides access to information about local license stores
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.Licenses">
            <summary>
            Provides access to licenses information, and allows licenses manipulation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.Status">
            <summary>
            Provides access to status information, such as open user sessions and 
            different counters values. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.Activation">
            <summary>
            Provides access to a license activation related functionality.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.ExecutionEngine">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.Customizations">
            <summary>
            Provides access to Customizations functionality.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.VendorName">
            <summary>
            Returns the name of the software vendor to whom the Permutation is assigned.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.Session">
            <summary>
            The currently open session object. Can be null if a session is not open.
            Use IsSessionOpen property in order to check if a session is open.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntime.IsSessionOpen">
            <summary>
            Indicates if session is open.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntime"/>
        </member>
        <member name="T:Microsoft.Licensing.ISLMSessionManagement">
            <summary>
             This interface provides functionality to manage user sessions. 
             The classes and properties exposed in this interface provide the functionality 
             to open and close sessions, and report the open/close status of sessions.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMSessionManagement.OpenSession(System.String,System.String)">
            <summary>
            Opens a session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMSessionManagement"/>
            <param name="product">Product name, as defined in License Management System.</param>
            <param name="version">Product version, as defined in License Management System.</param>
        </member>
        <member name="M:Microsoft.Licensing.ISLMSessionManagement.OpenSession(System.String,System.String,Microsoft.Licensing.LicenseSessionEvent)">
            <summary>
            Opens a session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMSessionManagement"/>
            <param name="product">Product name, as defined in License Management System.</param>
            <param name="version">Product version, as defined in License Management System.</param>
            <param name="invalidateHandler">A callback that is triggered when a session becomes invalid.</param>
        </member>
        <member name="M:Microsoft.Licensing.ISLMSessionManagement.CloseSession">
            <summary>
            Closes the currently open session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMSessionManagement"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMSessionManagement.Session">
            <summary>
            Represents the currently open session object. Can be null if a session is not open. 
            Use <see cref="P:Microsoft.Licensing.ISLMSessionManagement.IsSessionOpen"/> property in order to check if a session is open.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMSessionManagement"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMSessionManagement.IsSessionOpen">
            <summary>
            Indicates if the session is open.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMSessionManagement"/>
        </member>
        <member name="T:Microsoft.Licensing.ISLMRuntimeImpl">
            <summary>
            For internal use.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.ISLMRuntimeImpl.Initialize(System.Reflection.Assembly,System.String,System.Action{Microsoft.Licensing.ISLMCustomizations})">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.LicenseStores">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.Licenses">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.Status">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.Activation">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.Customizations">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.SessionManagement">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.ExecutionEngine">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.PermutationId">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.PermutationShortId">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="P:Microsoft.Licensing.ISLMRuntimeImpl.VendorName">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMRuntimeImpl"/>
        </member>
        <member name="T:Slps.Licensing.Installation.PermutationInstallerBase">
            <summary>
            Base class from which custom installers to install runtime components are derived.
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.Install(System.Collections.IDictionary)">
            <summary>
            Installs the runtime storage by calling ExecuteInstall()
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.Commit(System.Collections.IDictionary)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.ExecuteInstall">
            <summary>
            Installs the runtime storage, checking first that install can be carried out and afterwards verifying that the storage has been installed and configured correctly
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.Uninstall(System.Collections.IDictionary)">
            <summary>
            Does not currently uninstall/delete the runtime license storage (to avoid support issues that might arise on reinstallation etc)
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.ExecuteUninstall">
            <summary>
            Currently just verifies that the storage repository is still accessible.
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.Rollback(System.Collections.IDictionary)">
            <summary>
            Currently just verifies that the storage repository is still accessible. Does this by calling ExecuteRollback
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.ExecuteRollback">
            <summary>
            Currently just verifies that the storage repository is still accessible.
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.IsInstalled">
            <summary>
            Indicates whether the runtime storage is correctly installed and configured
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.IsVirtualized">
            <summary>
            Indicates whether the license storage is virtualised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.VerifyInstalled">
            <summary>
            Verifies the runtime storage is correctly installed and congfigured
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.PermutationInstallerBase.Obliterate">
            <summary>
            Verifies the storage repository is still accessible and then deletes/removes it.
            </summary>
        </member>
        <member name="T:Slps.Licensing.Installation.RuntimeInstallerHelpers">
            <summary>
            Provides functionality to install and configure the  runtime storage repositories if you are not using the standard System.Configuration.Install mechanisms
            </summary>
        </member>
        <member name="M:Slps.Licensing.Installation.RuntimeInstallerHelpers.ConfigureLicenseStoresAndPermissions(System.String)">
            <summary>
            Configures the license stores and sets the required permissions.
            </summary>
            <param name="permutationShortId">The permutation Short Id.</param>
        </member>
        <member name="M:Slps.Licensing.Installation.RuntimeInstallerHelpers.VerifyInstalled(System.String)">
            <summary>
            Verifies that the runtime storage respositories are correctly installed and configured.
            </summary>
            <param name="permutationShortId">The permutation Short Id.</param>
        </member>
        <member name="T:Slps.Licensing.StorageNotConfiguredException">
            <summary>
            Thrown when storage needed for storing licensing state is not correctly configured
            This is generally the result of the installer not having been executed.
            A Storage Inaccessible Exception will be thrown in the event that insufficient privilege is held to access the appropriate storage areas
            </summary>
        </member>
        <member name="T:Slps.Licensing.StorageInstallationWouldBeVirtualizedException">
            <summary>
            Thrown when installation routine is being run under UAC virtualization, which would redirect the access to HKLM\Software to HKCU\...\Classes\Virtual Store
            </summary>
        </member>
        <member name="T:Slps.Licensing.StorageAccessCouldBeVirtualizedException">
            <summary>
            Thrown when Verify Installed is being run under UAC virtualization, which would redirect the access to HKLM\Software to HKCU\...\Classes\Virtual Store and thus potentially confuse end-users due to ambiguity between licenses being user-specific instead of machine-specific
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.NoLicenseHandlerType">
            <summary>
            This describes the available options to handle a situation when a license is not available for executing an application or method.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="F:Microsoft.Licensing.NoLicenseHandlerType.None">
            <summary>
            Specifies that no action is taken if a license is not available to
            execute an application or method. An exception will be thrown when attempting to execute such an application/method.
            </summary>
            <seealso cref="T:Microsoft.Licensing.NoLicenseHandlerType"/>
        </member>
        <member name="F:Microsoft.Licensing.NoLicenseHandlerType.Standard">
            <summary>
            Specifies that the standard UI will be displayed.
            </summary>
            <seealso cref="T:Microsoft.Licensing.NoLicenseHandlerType"/>
        </member>
        <member name="F:Microsoft.Licensing.NoLicenseHandlerType.Custom">
            <summary>
            Specifies that custom action be performed when no license is available to execute
            the application or method. The action handler should be implemented in 
            vendor-provided Customizations DLL. The DLL should contain
            a code that subscribes and handles ISLMCustomizations.OnNoValidLicenses event.
            </summary>
            <seealso cref="T:Microsoft.Licensing.NoLicenseHandlerType"/>
        </member>
        <member name="P:Slps.Runtime.Internal.ProductInfoConstants.UNDEFINED_PRODUCT_NAME">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Slps.Runtime.Internal.ProductInfoConstants.UNDEFINED_PRODUCT_VERSION">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:Slps.Runtime.Customizations.PermutationCustomizations">
             <summary>
             <para>Enables one to inspect and/or customize <see cref="T:Microsoft.Licensing.ISLMRuntime"/> instances as they are created within or via the Runtime Apis.</para>
             <para>Applies to all instances of the Runtime components created from the point of customization forward. This includes:</para>
             <para>- explicitly <c>new</c>'d instances of <see cref="T:Microsoft.Licensing.SLMRuntime"/>.</para>
             <para>- instances created via <see cref="T:Microsoft.Licensing.SLMRuntimeFactory"/>.</para>
             <para>- instances implicitly created for the execution of Protected Code.</para>
             </summary>
             <remarks>The settings for each Vendor Permutation are managed separately. See <see cref="T:Slps.Runtime.Customizations.GlobalCustomizations"/> for further information.</remarks>
             <seealso cref="T:Slps.Runtime.Customizations.GlobalCustomizations"/>
             <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
             <seealso cref="T:Microsoft.Licensing.SLMRuntimeFactory"/>
             <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
             <example><code>
            using System;
            using Slps.ProtectionAttributes;
            using Slps.Runtime.Customizations;
            using Microsoft.Licensing;
            
             public static class Program
             {
             	public static int Main()
             	{
             		try
             		{
             			SetLocalStorageRequirementsToNone();
             			UserCode();
             		}
             		catch ( Exception ex )
             		{
             			Console.WriteLine( ex );
             			return 1;
             		}
            
             		return 0;
             	}
            
             	[Feature]
             	public static void UserCode()
             	{
             	}
            
             	// Avoid the 'license store not initialized' message by telling runtime to have None
             	static void SetLocalStorageRequirementsToNone()
             	{
             		GlobalCustomizations.Instance.PermutationCustomizationsFor( "abc12" ).Customize
             			+= ( sender, arg ) =&gt;
             				arg.Customizations.PersistentStoreSupport = PersistentStoreSupport.None;
             	}
            }
             </code></example>
        </member>
        <member name="E:Slps.Runtime.Customizations.PermutationCustomizations.Customize">
             <summary>
             <para>Occurs when a <see cref="T:Microsoft.Licensing.ISLMRuntime"/> Object is about to have it's configuration frozen prior to use.</para>
             <para>The supplied <see cref="T:Slps.Runtime.Customizations.PermutationCustomizations.CustomizeEventArgs"/>:</para>
             <para>- provides context regarding why/where the instance is being generated.</para>
             <para>- enables the inspection and overriding of the <see cref="T:Microsoft.Licensing.ISLMCustomizations"/> settings that are about to be applied.</para>
             </summary>
            <example><code>
             GlobalCustomizations.Instance.PermutationCustomizationsFor( "abc12" ).Customize += 
             	( sender, arg ) =&gt;
             	{
             		Console.WriteLine( "PersistentStoreSupport was going to be: " + arg.Customizations.PersistentStoreSupport);
             		arg.Customizations.PersistentStoreSupport = PersistentStoreSupport.None;
             	}
            </code></example>
        </member>
        <member name="T:Slps.Runtime.Customizations.PermutationCustomizations.CustomizeEventArgs">
            <summary>
            <para>Provides:</para>
            <para>- details of the context within which the <see cref="T:Microsoft.Licensing.ISLMRuntime"/> Object is being created.</para>
            <para>- access to the <see cref="T:Microsoft.Licensing.ISLMCustomizations"/> interface of the Object in order to allow inspection or overriding of settings.</para>
            </summary>
            <seealso cref="T:Slps.Runtime.Customizations.PermutationCustomizations"/>
        </member>
        <member name="F:Slps.Runtime.Customizations.PermutationCustomizations.CustomizeEventArgs.Customizations">
            <summary>
            The customization interface of the <see cref="T:Microsoft.Licensing.ISLMRuntime"/> Object being created.
            </summary>
            <seealso cref="T:Microsoft.Licensing.ISLMCustomizations"/>
        </member>
        <member name="F:Slps.Runtime.Customizations.PermutationCustomizations.CustomizeEventArgs.AssociatedAssembly">
            <summary>
            The Protected Assembly for which the <see cref="T:Microsoft.Licensing.ISLMRuntime"/> Object is being created.
            </summary>
        </member>
        <member name="F:Slps.Runtime.Customizations.PermutationCustomizations.CustomizeEventArgs.PermutationShortId">
            <summary>
            The Permutation Short Code for which the <see cref="T:Microsoft.Licensing.ISLMRuntime"/> Object is being created.
            </summary>
        </member>
        <member name="T:Slps.Runtime.Customizations.GlobalCustomizations">
            <summary>
            <para>Enables one to manage configuration settings pertaining to the Software Potential components on an <see cref="T:System.AppDomain"/>-wide basis.</para>
            </summary>
            <remarks><para>Note that the customizations facility requires one to identify one's Software Potential Permutation Short Code, as in various hosting contexts
            multiple Software Potential-Protected components may need to coexist, each isolated from each other's configuration choices.</para>
            <para>For example, multiple Office Addins may be present within a given <see cref="T:System.AppDomain"/> of a single Host Application.</para></remarks>
            <seealso cref="T:Slps.Runtime.Customizations.PermutationCustomizations"/>
            <seealso cref="T:Slps.Runtime.Customizations.PermutationCustomizations.CustomizeEventArgs"/>
        </member>
        <member name="M:Slps.Runtime.Customizations.GlobalCustomizations.PermutationCustomizationsFor(System.String)">
            <summary>
            Accesses the Permutation-scope customizations for a given Software Potential Permutation.
            </summary>
            <param name="permutationShortId">The 5-digit Permutation Short Code for which one wishes to apply customizations, e.g. <c>"abc12"</c>.</param>
            <returns>The configuration management context for the indicated <paramref name="permutationShortId"/></returns>
            <exception cref="T:System.ArgumentException">if no <paramref name="permutationShortId"/> is specified.</exception>
        </member>
        <member name="P:Slps.Runtime.Customizations.GlobalCustomizations.Instance">
            <summary>
            Obtains the Singleton instance of the <see cref="T:Slps.Runtime.Customizations.GlobalCustomizations"/> for the Current <see cref="T:System.AppDomain"/>.
            </summary>
            <seealso cref="T:Slps.Runtime.Customizations.PermutationCustomizations"/>
        </member>
        <member name="M:Microsoft.Licensing.RedistributableAssemblyNameFormatter.Probing.Permutations.GetCorrespondingPermutationAssemblyName(System.String)">
            <summary>
            Returns full permutation assembly name.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.RedistributableAssemblyNameFormatter.Probing.Customizations.CustomizationNameFormat">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.PublicEnvelopeAssemblyHeader">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.PublicEnvelopeAssemblyHeader.#ctor">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.PublicEnvelopeAssemblyHeader.#ctor(System.String)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.PublicEnvelopeAssemblyHeader.#ctor(System.Byte[])">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.PublicEnvelopeAssemblyHeader.Read(Slps.Engine.Persistence.BinaryReaderEx)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.PublicEnvelopeAssemblyHeader.UsedPermutationShortId">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.SLMAssemblyHeader.GetSLMAssemblyHeader(System.Reflection.Assembly,System.Boolean)">
            <exception cref="T:Microsoft.Licensing.Utils.GenException"></exception>
        </member>
        <member name="T:Microsoft.Licensing.SLMConstants">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.DEFAULT_BRAND_NAME">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.MICROSOFT_MASTER_VENDOR">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.MICROSOFT_GENERIC_VENDOR">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.PERMUTATION_PRODUCT_NAME">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.PERMUTATION_PRODUCT_VERSION">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.ASM_HEADER_RESOURCE">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.LICENSE_FILE_EXTENSION">
            <summary>
            Returns SLP license file extension.
            </summary>
        </member>
        <member name="P:Microsoft.Licensing.SLMConstants.LICENSE_FILE_PREFIX">
            <summary>
            Returns SLP license file prefix.
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.SLMRuntimeCustomizationBase">
            <summary>
            SLMRuntimeCustomizationBase is a base class that should be inherited by a user-defined  customization code class.
            The user-defined class that inherits SLMRuntimeCustomizationBase should be compiled as part of a Customization-Assembly DLL that should be accessible
            by the protected component or application during runtime. 
            
            The name of the Customization-Assembly DLL must comply with the names in the following list in order to be detected:
            1) Microsoft.Licensing.Customization_f4a0e_2.0.DLL
            2) Microsoft.Licensing.Customization2.0.DLL
            3) Microsoft.Licensing.Customization.DLL
            4) SLMCustomizations.DLL
            
            Search of the customization DLL is performed in the order in which it appears.
            Note that "f4a0e" is a sample private permutation short-Id, and should be replaced in real-life with the relevant actual Id.
            "2.0" denote the CLR version used.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <InternalNotesOnly CARE="FOR INTERNAL USE ONLY">
            The DLL naming comment was extracted from CustomizationServices.GetCustomizationLibNames() (after removing the master permutation and branding possibilities)
            </InternalNotesOnly>        
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntimeCustomizationBase.Initialize(Microsoft.Licensing.ISLMCustomizations)">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntimeCustomizationBase"/>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntimeCustomizationBase.OnRegisterEvents(Microsoft.Licensing.ISLMCustomizations)">
            <summary>
            This method must be implemented by the derived class.
            The customization code should subscribe to the relevant events in this method.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntimeCustomizationBase"/>
            <param name="customizations">Customizations interface.</param>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntimeCustomizationBase.OnLoad">
            <summary>
            This method may be overridden by the derived class. Custom initializations can
            be performed in this method.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntimeCustomizationBase"/>
        </member>
        <member name="T:Microsoft.Licensing.SLMRuntimeFactory">
            <summary>
            The SLMRuntimeFactory class represents a factory for the SLMRuntime object.
            Typically, the SLMRuntime objects can be created directly via the 
            appropriate SLMRuntime parameterized constructor, or, via one of the static factory methods 
            of the SLMRuntime class.
            This class is available primarily to provide support for construction of the 
            SLMRuntime object when using COM (which cannot use parameterized constructors or 
            static methods).
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
            <InternalNotesOnly CARE="FOR INTERNAL USE ONLY">
            Detailed method and property descriptions can be found in the ISLMRuntimeFactory comments.
            </InternalNotesOnly>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntimeFactory.CachedForProtectedAssembly(System.Reflection.Assembly)">
            <summary>
            Uses the permutation Id from the header - this implies that the assembly MUST be protected
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntimeFactory.DisposeCachedForAll">
            <summary>
            For internal use of the Runtime only
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.SLMRuntimeFactory.Internal">
            <summary>
            For internal use of the Runtime only
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntimeFactory.Internal.NewMasterFor(System.Reflection.Assembly)">
            <summary>
            For internal use of the Runtime only
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntimeFactory.Internal.CachedFor(System.Reflection.Assembly,System.String)">
            <summary>
            For internal use of the Runtime only
            </summary>
        </member>
        <member name="T:Microsoft.Licensing.SLMRuntime">
            <summary>
            Represents a single entry point for programmatic access
            to Software Potential Api. Multiple instances of the class can exist in a process.
            </summary>
            <seealso cref="N:Microsoft.Licensing"/>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.#ctor(System.String)">
            <summary>
            The SLMRuntime(string) constructor is used to construct a non-cached SLMRuntime object for the given permutationShortId.
            NOTE: It is the caller's responsibility to dispose of the obtained object when done with it.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
            <returns>
            The corresponding SLMRuntime object. 
            </returns>
            <InternalNotesOnly CARE="FOR INTERNAL USE ONLY">
            Never use this for SVM execution.
            </InternalNotesOnly>        
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.#ctor(System.String,System.Reflection.Assembly,System.Boolean)">
             <summary>
             The SLMRuntime(string, Assembly, bool) constructor creates a permutation-services 
             object that corresponds to the supplied permutation Id,
             which can optionally be cached per given associated assembly.
             
             IMPORTANT: If the cacheByAssembly parameter is passed as false, it is the caller's 
             responsibility to dispose of the obtained SLMRuntime object when done with it.
             If the cacheByAssembly parameter is passed as true, the caller must never
             dispose of the obtained SLMRuntime object.
             </summary>
             <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
             <param name="predefinedPermutationShortId">
             The predefinedPermutationShortId parameter is a string that represents the 
             first 5 digits of the full hexadecimal permutation Id (which is a GUID). 
             These digits can be seen in the name of the relevant permutation assembly 
             between the last two underscore ("_") characters. 
             E.g.: the short permutation Id "1cc06" correlates to 
             "Microsoft.Licensing.Permutation_1cc06_2.0.dll" 
             </param>
             <param name="associatedAssembly">
             The associatedAssembly parameter is used to associate an assembly with the SLMRuntime 
             object that is to be constructed or fetched. 
             This association can be used for automatic extraction of the permutation Id 
             (when no permutation Id was supplied, on condition that the assembly was protected
             by the Code Protector). In addition this parameter is required for cases where the 
             cacheByAssembly parameter is passed as true.
             NOTE: If the associatedAssembly parameter is left as null, it is effectively 
             equivalent to setting it to the caller assembly.
             </param>
             <param name="cacheByAssembly">
             The cacheByAssembly parameter indicates if the SLMRuntime that is to be created
             will pass through a caching mechanism per associated assembly (see the 
             associatedAssembly parameter) or not.
             If the cacheByAssembly parameter is passed as false, no caching will be used 
             when generating the SLMRuntime object.
             If the cacheByAssembly parameter is passed as true, a caching 
             mechanism will be used. The key to the hash will be the associated assembly. 
            
             Caching details:
             When this constructor is called, if it is detected that a SLMRuntime object 
             was never created for the given associated assembly (in the running process), a 
             new instance will be created upon this call, stored in the cache and returned 
             to the caller.
             During the call to this constructor, if it is detected that a SLMRuntime object 
             was previously created for the associated assembly (in the running process),
             this cached instance will be returned to the caller.
             </param>
             <returns>
             The corresponding SLMRuntime object. 
             </returns>
             <InternalNotesOnly CARE="FOR INTERNAL USE ONLY">
             1. Never use non-cached objects for SVM execution, it is a major performance killer.
             2. The master permutation's name does not contain the permutation short Id.
             3. If predefinedPermutationShortId parameter was passed as a null value or an empty string, 
             and if the associated assembly of the associatedAssembly parameter does not
             have a SLM header, this constructor will effectively use the master permutation 
             short Id ("b0eb8").
             4. In none-DEBUG versions, the predefinedPermutationShortId parameter is ignored if 
             the cacheByAssembly parameter is set to true and the SLMRuntime was cached previously 
             for the given associatedAssembly. 
             In DEBUG mode, a verification of this value against the one stored in the cached 
             SLMRuntime exists.
             </InternalNotesOnly>        
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.Dispose">
            <summary>
            Disposes the SLMRuntime object. 
            If one has requested Caching (by creating via SLMRuntimeFactory), this will not actually Dispose of the internal configuration of the runtime execution context
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.DisposeCachedForAll">
            <summary>
            For internal use of the Runtime only
            </summary>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.OpenSession(System.String,System.String)">
            <summary>
            Opens a session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
            <param name="product">Product name, as defined in License Management System.</param>
            <param name="version">Product version, as defined in License Management System.</param>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.OpenSession(System.String,System.String,Microsoft.Licensing.LicenseSessionEvent)">
            <summary>
            Opens a session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
            <param name="product">Product name, as defined in License Management System.</param>
            <param name="version">Product version, as defined in License Management System.</param>
            <param name="invalidateHandler">A callback that is triggered when a session becomes invalid.</param>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.CloseSession">
            <summary>
            Closes the currently open session.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.ExecuteMethod(System.Object,System.String,System.String,System.Object[],System.Type[],System.Type[])">
            <summary>
            (used for transformed code invocation from the transformed MSIL wrapper).
            For internal use. 
            Important: Do not overload this method to avoid problems when the runtime binding is used.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="M:Microsoft.Licensing.SLMRuntime.InternalExecuteMethod(System.Reflection.Assembly,System.String,Slps.Engine.Execution.Internal.IExecutionEngineParams)">
            <summary>
            "declaringAssembly" is the assembly where the original method (now transformed)
            was declared.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.LicenseStores">
            <summary>
            Provides access to information about local license devices.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.Licenses">
            <summary>
            Provides access to license information, and allows license manipulation.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.Activation">
            <summary>
            Provides access to a license delivery related functionality.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.Customizations">
            <summary>
            Provides access to customizations functionality.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.Status">
            <summary>
            Provides access to status information, such as open sessions and 
            different counters values. 
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.ExecutionEngine">
            <summary>
            For internal use.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.VendorName">
            <summary>
            Returns the name of the software vendor to whom the Permutation is assigned.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.Session">
            <summary>
            Represents the currently open session object. Can be null if a session is not open.
            Use <see cref="P:Microsoft.Licensing.SLMRuntime.IsSessionOpen"/> property in order to check if a session is open.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
        <member name="P:Microsoft.Licensing.SLMRuntime.IsSessionOpen">
            <summary>
            Indicates if the session is open.
            </summary>
            <seealso cref="T:Microsoft.Licensing.SLMRuntime"/>
        </member>
    </members>
</doc>
